<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KlotosLib</name>
    </assembly>
    <members>
        <member name="T:KlotosLib.CommonTools">
            <summary>
            Содержит статические чистые методы по работе с самыми общими аспектами переменных
            </summary>
        </member>
        <member name="M:KlotosLib.CommonTools.IsNull``1(``0)">
            <summary>
            Определяет, содержит ли экземпляр ссылочного типа null-значение
            </summary>
            <typeparam name="T">Тип, являющийся ссылочным</typeparam>
            <param name="Source">Экземпляр, который необходимо проверить</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CommonTools.IsIn``1(``0,``0[])">
            <summary>
            Определяет, находится ли данный объект в массиве указанных объектов
            </summary>
            <typeparam name="T">Тип, который поддерживает сравнение с самим собою посредством реализации интерфейса System.IEquatable&lt;TNumber&gt;</typeparam>
            <param name="Source">Значение, для которого необходимо определить, находится ли оно в указанной последовательности или нет</param>
            <param name="Sequence">Набор элементов, в котором происходит поиск. Если NULL - будет выброшено исключение.</param>
            <returns>true - значение присутствует, false - значение отсутствует.</returns>
        </member>
        <member name="M:KlotosLib.CommonTools.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Определяет, находится ли данный объект в наборе указанных объектов
            </summary>
            <typeparam name="T">Тип, который поддерживает сравнение с самим собою посредством реализации интерфейса System.IEquatable&lt;TNumber&gt;</typeparam>
            <param name="Source">Значение, для которого необходимо определить, находится ли оно в указанном наборе или нет</param>
            <param name="Set">Набор элементов, в котором происходит поиск. Если NULL - будет выброшено исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CommonTools.IsBetween``1(``0,``0,``0,System.Boolean)">
            <summary>
            Определяет, является ли указанный объект больше (или равно) первого сравниваемого граничного значения и меньше (или равно) второго. 
            Тип объекта должен поддерживать сравнение со своим типом.
            </summary>
            <remarks>Порядок сравниваемых граничных значений имеет критическое значение: 5.IsBetween(6, 4, true) возвратит false</remarks>
            <typeparam name="T">Тип, который поддерживает сравнение с самим собою посредством реализации интерфейса System.IComparable&lt;TNumber&gt;</typeparam>
            <param name="Actual">Текущий объект, который надо сравнить с двумя другими</param>
            <param name="Lower">Объект, который, в случае успешного сравнения, должен быть меньше (или равен) текущему. 
            Если больше текущего, метод возвратит false.</param>
            <param name="Upper">Объект, который, в случае успешного сравнения, должен быть больше (или равен) текущему. 
            Если меньше текущего, метод возвратит false.</param>
            <param name="IncludeBounds">Флаг, определяющий, включать ли границы (true) или нет (false)</param>
            <returns>Булевый флаг: true - указаный объект находится между двумя другими, false - вне границ</returns>
        </member>
        <member name="M:KlotosLib.CommonTools.IsBetweenIB``1(``0,``0,``0,System.Boolean)">
            <summary>
            Определяет, находится ли указанный объект между двумя другими сравниваемыми граничными значениями вне зависимости от их порядка. 
            Тип объекта должен поддерживать сравнение со своим типом.
            </summary>
            <remarks>Порядок сравниваемых граничных значений не имеет значения: 5.IsBetween(4, 6, true) == 5.IsBetween(6, 4, true) == true</remarks>
            <typeparam name="T">Тип, который поддерживает сравнение с самим собою посредством реализации интерфейса System.IComparable&lt;TNumber&gt;</typeparam>
            <param name="Actual">Текущий объект, который надо сравнить с двумя другими</param>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="IncludeBounds"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CommonTools.Swap2Types``1(``0@,``0@)">
            <summary>
            Меняет местами две переменные ссылочного типа (переменные значимого типа не поддерживаются)
            </summary>
            <remarks>Если обе переменные одновременно являются NULL, или если они обе указывают на один и тот же экземплер класса в памяти,
            метод не делает никаких операций.</remarks>
            <typeparam name="T">Тип, принадлежать к которому должны обе переменные</typeparam>
            <param name="Value1">Первая переменная ссылочного типа, которая в результате должна указывать на значение второй.</param>
            <param name="Value2">Вторая переменная ссылочного типа, которая в результате должна указывать на значение первой.</param>
        </member>
        <member name="M:KlotosLib.CommonTools.TryParse(System.String)">
            <summary>
            Пытается преобразовать строку в логическое значение, и если преобразование провалилось, возвращает NULL.
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CommonTools.TryParse(System.Object)">
            <summary>
            Пытается преобразовать неизвестный тип данных в логическое значение, и если преобразование провалилось, возвращает NULL.
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CommonTools.ToString(System.Boolean,KlotosLib.CommonTools.BooleanStr)">
            <summary>
            Преобразовывает текущее булевое значение в строковое представление согласно указаннным опциям
            </summary>
            <param name="SourceValue"></param>
            <param name="Option">Опция, влияющая на строковое представление значения. Если некорректна, будет возвращено значение по умолчанию <code>Boolean.ToString()</code>.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CommonTools.ToStringS``1(``0,System.String,System.String)">
            <summary>
            Пытается привести указанный тип к строке, и если это не удаётся, или же полученный экземпляр является NULL, то возвращает одну из указанных строк
            </summary>
            <typeparam name="T">Тип без ограничений</typeparam>
            <param name="Source">Экземпляр типа <typeparamref name="T"/></param>
            <param name="IfNull">Строка, которая будет возвращена, если указанный экземпляр равен NULL.</param>
            <param name="IfFail">Строка, которая будет возвращена, указанный экземпляр не NULL, однако преобразование в строку завершилось неудачей.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CommonTools.ToStringS``1(``0,System.String)">
            <summary>
            Пытается привести указанный тип к строке, и если это не удаётся, возвращает указанную строку
            </summary>
            <typeparam name="T">Тип без ограничений</typeparam>
            <param name="Source"></param>
            <param name="IfNullOrFail"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CommonTools.ToStringS``1(``0)">
            <summary>
            Пытается привести указанный тип к строке, и если это не удаётся, возвращает пустую
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CommonTools.ConvertToByteArray(System.IO.FileInfo)">
            <summary>
            Конвертирует входной файл в байтовый массив. Если указанный файл отсутствует или недоступен, генерируется исключение.
            </summary>
            <param name="Source">Объект FileInfo, содержащимй информацию о файле, который необходимо сконвертировать</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CommonTools.AreAllEqual``1(``0[])">
            <summary>
            Сравнивает между собой элементы последовательности, определяя, все ли оны равны. Если все равны между собой, возвращает true. Если хотя бы один отличается - возвращает false.
            </summary>
            <typeparam name="T">Тип, который поддерживает нахождение равенства с самим собою посредством реализации интерфейса System.IEquatable&lt;TNumber&gt;</typeparam>
            <param name="Sequence">Список элементов. Если NULL, пустой или содержит лишь один элемент, выбрасывается исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CommonTools.AreCharsEqual(System.Char,System.Char,System.Boolean)">
            <summary>
            Определяет, равны ли два указанных символа между собой
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="IgnoreCase">Определяет, игнорировать ли при сравнении символов регистр литер. true - игнорировать, false - принимать во внимание.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CommonTools.AreCharsEqual(System.Boolean,System.Char[])">
            <summary>
            Определяет, все ли символы равны между собой
            </summary>
            <param name="IgnoreCase">Определяет, игнорировать ли при сравнении символов регистр литер. true - игнорировать, false - принимать во внимание.</param>
            <param name="Chars">Набор символов, все из которых следует проверить на равенство. Если NULL или содержит меньше 2-х элементов, будет выброшено исключение.</param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.CommonTools.BooleanStr">
            <summary>
            Опция форматирования булевого типа
            </summary>
        </member>
        <member name="F:KlotosLib.CommonTools.BooleanStr.TrueFalse">
            <summary>
            True или False словами (первая буква с Большой литеры)
            </summary>
        </member>
        <member name="F:KlotosLib.CommonTools.BooleanStr.TrueFalseCaseless">
            <summary>
            true или false словами (первая буква с малнькой литеры)
            </summary>
        </member>
        <member name="F:KlotosLib.CommonTools.BooleanStr.OneZero">
            <summary>
            1 или 0 цифрой
            </summary>
        </member>
        <member name="F:KlotosLib.CommonTools.BooleanStr.OneNegate">
            <summary>
            1 или -1 числами
            </summary>
        </member>
        <member name="F:KlotosLib.CommonTools.BooleanStr.PlusMinus">
            <summary>
            + или - знаками
            </summary>
        </member>
        <member name="T:KlotosLib.LambdaExtensions">
            <summary>
            Содержит различные утилитаные методы, использующие рефлексию и/или деревья выражений
            </summary>
        </member>
        <member name="M:KlotosLib.LambdaExtensions.MemberName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Возвращает текстовое название указанного члена данного объекта
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="Source"></param>
            <param name="Expr"></param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.ByteQuantity">
            <summary>
            Инкапсулирует байтовую величину, предоставляя различные методы преобразования
            </summary>
        </member>
        <member name="M:KlotosLib.ByteQuantity.GetKibibytes(System.Byte)">
            <summary>
            Возвращает текущее значение в кибибайтах (KiB), округляя его с указанной точностью
            </summary>
            <param name="Precision">Точность, выраженная в количестве цифр после запятой, которые будут присутствовать в возвращаемом значении</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.GetMebibytes(System.Byte)">
            <summary>
            Возвращает текущее значение в мебибайтах (MiB), округляя его с указанной точностью
            </summary>
            <param name="Precision">Точность, выраженная в количестве цифр после запятой, которые будут присутствовать в возвращаемом значении</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.GetGibibytes(System.Byte)">
            <summary>
            Возвращает текущее значение в гибибайтах (GiB), округляя его с указанной точностью
            </summary>
            <param name="Precision">Точность, выраженная в количестве цифр после запятой, которые будут присутствовать в возвращаемом значении</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.GetTebibytes(System.Byte)">
            <summary>
            Возвращает текущее значение в тебибайтах (TiB), округляя его с указанной точностью
            </summary>
            <param name="Precision">Точность, выраженная в количестве цифр после запятой, которые будут присутствовать в возвращаемом значении</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.GetPebibytes(System.Byte)">
            <summary>
            Возвращает текущее значение в пебибайтах (PiB), округляя его с указанной точностью
            </summary>
            <param name="Precision">Точность, выраженная в количестве цифр после запятой, которые будут присутствовать в возвращаемом значении</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.GetKilobytes(System.Byte)">
            <summary>
            Возвращает текущее значение в килобайтах (KB), округляя его с указанной точностью
            </summary>
            <param name="Precision">Точность, выраженная в количестве цифр после запятой, которые будут присутствовать в возвращаемом значении</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.GetMegabytes(System.Byte)">
            <summary>
            Возвращает текущее значение в мегабайтах (MB), округляя его с указанной точностью
            </summary>
            <param name="Precision">Точность, выраженная в количестве цифр после запятой, которые будут присутствовать в возвращаемом значении</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.GetGigabytes(System.Byte)">
            <summary>
            Возвращает текущее значение в гигабайтах (GB), округляя его с указанной точностью
            </summary>
            <param name="Precision">Точность, выраженная в количестве цифр после запятой, которые будут присутствовать в возвращаемом значении</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.GetTerabytes(System.Byte)">
            <summary>
            Возвращает текущее значение в терабайтах (TB), округляя его с указанной точностью
            </summary>
            <param name="Precision">Точность, выраженная в количестве цифр после запятой, которые будут присутствовать в возвращаемом значении</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.GetPetabytes(System.Byte)">
            <summary>
            Возвращает текущее значение в петабайтах (PB), округляя его с указанной точностью
            </summary>
            <param name="Precision">Точность, выраженная в количестве цифр после запятой, которые будут присутствовать в возвращаемом значении</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToStringWithBinaryPrefix(System.Byte,System.Boolean)">
            <summary>
            Возвращает строковое представление округлённой байтовой величины с заданной точностью в двоичных префиксах. 
            Множитель выбирается автоматически в зависимости от количества байтов
            </summary>
            <param name="Precision">Точность, определяющая количество знаков после запятой, которое будет выведено</param>
            <param name="DecimalSeparator">Десятичный разделитель между целой и дробной частью. true - '.', false - ','</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToStringWithDecimalPrefix(System.Byte,System.Boolean)">
            <summary>
            Возвращает строковое представление округлённой байтовой величины с заданной точностью в десятичных префиксах. 
            Множитель выбирается автоматически в зависимости от количества байтов
            </summary>
            <param name="Precision">Точность, определяющая количество знаков после запятой, которое будет выведено</param>
            <param name="DecimalSeparator">Десятичный разделитель между целой и дробной частью. true - '.', false - ','</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.FromBits(System.Int64)">
            <summary>
            Возвращает новый экземпляр байтовой величины, содержащий указанное количество битов
            </summary>
            <param name="BitValue">Количество бит. Если меньше 0, будет выброшено исключение</param>
            <returns>Новый экземпляр структуры</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Количество бит не может быть отрицательным</exception>
        </member>
        <member name="M:KlotosLib.ByteQuantity.FromBytes(System.Int64)">
            <summary>
            Возвращает новый экземпляр байтовой величины, содержащий указанное количество байт
            </summary>
            <param name="ByteValue">Количество байт. Если меньше 0, будет выброшено исключение</param>
            <returns>Новый экземпляр структуры</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Количество байт не может быть отрицательным</exception>
        </member>
        <member name="M:KlotosLib.ByteQuantity.FromKibibytes(System.Decimal)">
            <summary>
            Возвращает новый экземпляр байтовой величины, содержащий указанное количество кибибайт (KiB), где 1 KiB = 1024 B
            </summary>
            <param name="KibibyteValue">Количество кибибайт. Если меньше 0, будет выброшено исключение</param>
            <returns>Новый экземпляр структуры</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Количество кибибайт не может быть отрицательным</exception>
        </member>
        <member name="M:KlotosLib.ByteQuantity.FromMebibytes(System.Decimal)">
            <summary>
            Возвращает новый экземпляр байтовой величины, содержащий указанное количество мебибайт (MiB), где 1 MiB = 1024^2 B
            </summary>
            <param name="MebibyteValue">Количество мебибайт. Если меньше 0, будет выброшено исключение</param>
            <returns>Новый экземпляр структуры</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Количество мебибайт не может быть отрицательным</exception>
        </member>
        <member name="M:KlotosLib.ByteQuantity.FromGibibytes(System.Decimal)">
            <summary>
            Возвращает новый экземпляр байтовой величины, содержащий указанное количество гибибайт (GiB), где 1 GiB = 1024^3 B
            </summary>
            <param name="GibibyteValue">Количество гибибайт. Если меньше 0, будет выброшено исключение</param>
            <returns>Новый экземпляр структуры</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Количество гибибайт не может быть отрицательным</exception>
        </member>
        <member name="M:KlotosLib.ByteQuantity.FromTebibytes(System.Decimal)">
            <summary>
            Возвращает новый экземпляр байтовой величины, содержащий указанное количество тебибайт (TiB), где 1 TiB = 1024^4 B
            </summary>
            <param name="TebibyteValue">Количество тебибайт. Если меньше 0, будет выброшено исключение</param>
            <returns>Новый экземпляр структуры</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Количество тебибайт не может быть отрицательным</exception>
        </member>
        <member name="M:KlotosLib.ByteQuantity.FromPebibytes(System.Decimal)">
            <summary>
            Возвращает новый экземпляр байтовой величины, содержащий указанное количество пебибайт (PiB), где 1 PiB = 1024^5 B
            </summary>
            <param name="PebibyteValue">Количество пебибайт. Если меньше 0, будет выброшено исключение</param>
            <returns>Новый экземпляр структуры</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Количество пебибайт не может быть отрицательным</exception>
        </member>
        <member name="M:KlotosLib.ByteQuantity.FromKilobytes(System.Decimal)">
            <summary>
            Возвращает новый экземпляр байтовой величины, содержащий указанное количество килобайт (KB), где 1 КB = 1000 B
            </summary>
            <param name="KilobyteValue">Количество килобайт. Если меньше 0, будет выброшено исключение</param>
            <returns>Новый экземпляр структуры</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Количество килобайт не может быть отрицательным</exception>
        </member>
        <member name="M:KlotosLib.ByteQuantity.FromMegabytes(System.Decimal)">
            <summary>
            Возвращает новый экземпляр байтовой величины, содержащий указанное количество мегабайт (MB), где 1 MB = 1000^2 B
            </summary>
            <param name="MegabyteValue">Количество мегабайт. Если меньше 0, будет выброшено исключение</param>
            <returns>Новый экземпляр структуры</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Количество мегабайт не может быть отрицательным</exception>
        </member>
        <member name="M:KlotosLib.ByteQuantity.FromGigabytes(System.Decimal)">
            <summary>
            Возвращает новый экземпляр байтовой величины, содержащий указанное количество гигабайт (GB), где 1 GB = 1000^3 B
            </summary>
            <param name="GigabyteValue">Количество гигабайт. Если меньше 0, будет выброшено исключение</param>
            <returns>Новый экземпляр структуры</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Количество гигабайт не может быть отрицательным</exception>
        </member>
        <member name="M:KlotosLib.ByteQuantity.FromTerabytes(System.Decimal)">
            <summary>
            Возвращает новый экземпляр байтовой величины, содержащий указанное количество терабайт (TB), где 1 TB = 1000^4 B
            </summary>
            <param name="TerabyteValue">Количество терабайт. Если меньше 0, будет выброшено исключение</param>
            <returns>Новый экземпляр структуры</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Количество терабайт не может быть отрицательным</exception>
        </member>
        <member name="M:KlotosLib.ByteQuantity.FromPetabytes(System.Decimal)">
            <summary>
            Возвращает новый экземпляр байтовой величины, содержащий указанное количество петабайт (PB), где 1 PB = 1000^5 B
            </summary>
            <param name="PetabyteValue">Количество петабайт. Если меньше 0, будет выброшено исключение</param>
            <returns>Новый экземпляр структуры</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Количество петабайт не может быть отрицательным</exception>
        </member>
        <member name="M:KlotosLib.ByteQuantity.Equals(KlotosLib.ByteQuantity)">
            <summary>
            Сравнивает текущий экземпляр с указанным строго типизированным
            </summary>
            <param name="Other"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.Equals(System.Object)">
            <summary>
            Сравнивает текущий экземпляр с указанным неизвестного типа
            </summary>
            <param name="Other"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.GetHashCode">
            <summary>
            Возвращает хэш-код данного экземпляра
            </summary>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.CompareTo(KlotosLib.ByteQuantity)">
            <summary>
            Сравнивает байтовую величину текущего экземпляра с указанным строго типизированным
            </summary>
            <param name="Other"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.CompareTo(System.Object)">
            <summary>
            Сравнивает байтовую величину текущего экземпляра с указанным неизвестного типа
            </summary>
            <param name="Other"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.Clone">
            <summary>
            Создаёт новый экземпляр, идентичный данному
            </summary>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.System#ICloneable#Clone">
            <summary>
            Создаёт новый экземпляр, идентичный данному, и возвращает его в виде Object
            </summary>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.GetTypeCode">
            <summary>
            Возвращает код данного типа
            </summary>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Пытае5тся выполнить преобразование данного типа на указанный
            </summary>
            <param name="conversionType"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToDouble(System.IFormatProvider)">
            <summary>
            Возвращает количество байт в виде числа с плавающей запятой двойной точности
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToSingle(System.IFormatProvider)">
            <summary>
            Возвращает количество байт в виде числа с плавающей запятой одинарной точности
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToDecimal(System.IFormatProvider)">
            <summary>
            Возвращает количество байт в виде десятичного числа с плавающей запятой
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToInt64(System.IFormatProvider)">
            <summary>
            Возвращает количество байт в виде целого знакового 8-байтового числа
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToUInt64(System.IFormatProvider)">
            <summary>
            Возвращает количество байт в виде целого беззнакового 8-байтового числа
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToInt32(System.IFormatProvider)">
            <summary>
            Возвращает количество байт в виде целого знакового 4-байтового числа, если количество байт достаточно невелико, чтобы быть представленным этим числом
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToUInt32(System.IFormatProvider)">
            <summary>
            Возвращает количество байт в виде целого беззнакового 4-байтового числа, если количество байт достаточно невелико, чтобы быть представленным этим числом
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToInt16(System.IFormatProvider)">
            <summary>
            Возвращает количество байт в виде целого знакового 2-байтового числа, если количество байт достаточно невелико, чтобы быть представленным этим числом
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToUInt16(System.IFormatProvider)">
            <summary>
            Возвращает количество байт в виде целого беззнакового 2-байтового числа, если количество байт достаточно невелико, чтобы быть представленным этим числом
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToSByte(System.IFormatProvider)">
            <summary>
            Возвращает количество байт в виде целого знакового 1-байтового числа, если количество байт достаточно невелико, чтобы быть представленным этим числом
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToByte(System.IFormatProvider)">
            <summary>
            Возвращает количество байт в виде целого беззнакового 1-байтового числа, если количество байт достаточно невелико, чтобы быть представленным этим числом
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToBoolean(System.IFormatProvider)">
            <summary>
            Выбрасывает исключение InvalidCastException, так как количество байт не может быть выражено типом System.Boolean
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToChar(System.IFormatProvider)">
            <summary>
            Выбрасывает исключение InvalidCastException, так как количество байт не может быть выражено типом System.Char
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToDateTime(System.IFormatProvider)">
            <summary>
            Выбрасывает исключение InvalidCastException, так как количество байт не может быть выражено типом System.DateTime
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToString(System.IFormatProvider)">
            <summary>
            Вызывает базовую реализацию метода ToString для этого типа, параметр Provider игнорируется
            </summary>
            <param name="Provider"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.ToString">
            <summary>
            Возвращает строковое представление количества байт; разряды разделены пробелами, в конце присутствует приставка Bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.op_Equality(KlotosLib.ByteQuantity,KlotosLib.ByteQuantity)">
            <summary>
            Сравнивает два экземпляра на равенство
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.op_Inequality(KlotosLib.ByteQuantity,KlotosLib.ByteQuantity)">
            <summary>
            Сравнивает два экземпляра на неравенство
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.op_GreaterThan(KlotosLib.ByteQuantity,KlotosLib.ByteQuantity)">
            <summary>
            Определяет, строго больше ли байтовая величина первого экземпляра по сравнению с величиной второго
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.op_LessThan(KlotosLib.ByteQuantity,KlotosLib.ByteQuantity)">
            <summary>
            Определяет, строго меньше ли байтовая величина первого экземпляра по сравнению с величиной второго
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.op_GreaterThanOrEqual(KlotosLib.ByteQuantity,KlotosLib.ByteQuantity)">
            <summary>
            Определяет, больше или равна байтовая величина первого экземпляра по сравнению с величиной второго
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.op_LessThanOrEqual(KlotosLib.ByteQuantity,KlotosLib.ByteQuantity)">
            <summary>
            Определяет, меньше или равна байтовая величина первого экземпляра по сравнению с величиной второго
            </summary>
            <param name="Left"></param>
            <param name="Right"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.op_Addition(KlotosLib.ByteQuantity,KlotosLib.ByteQuantity)">
            <summary>
            Возвращает новую байтовую величину, содержащую результат сложения двух указанных величин
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ByteQuantity.op_Subtraction(KlotosLib.ByteQuantity,KlotosLib.ByteQuantity)">
            <summary>
            Возвращает новую байтовую величину, являющуюся разностью между двумя указанными величинами. Операция является коммуникативной.
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <returns></returns>
        </member>
        <member name="P:KlotosLib.ByteQuantity.Bits">
            <summary>
            Возвращает текущее значение в битах (Bit)
            </summary>
        </member>
        <member name="P:KlotosLib.ByteQuantity.Bytes">
            <summary>
            Возвращаеттекущее значение в байтах (Byte)
            </summary>
        </member>
        <member name="P:KlotosLib.ByteQuantity.Kibibytes">
            <summary>
            Возвращает текущее значение в кибибайтах (KiB) с полной точностью
            </summary>
        </member>
        <member name="P:KlotosLib.ByteQuantity.Mebibytes">
            <summary>
            Возвращает текущее значение в мебибайтах (MiB) с полной точностью
            </summary>
        </member>
        <member name="P:KlotosLib.ByteQuantity.Gibibytes">
            <summary>
            Возвращает текущее значение в гибибайтах (GiB) с полной точностью
            </summary>
        </member>
        <member name="P:KlotosLib.ByteQuantity.Tebibytes">
            <summary>
            Возвращает текущее значение в тебибайтах (TiB) с полной точностью
            </summary>
        </member>
        <member name="P:KlotosLib.ByteQuantity.Pebibytes">
            <summary>
            Возвращает текущее значение в пебибайтах (PiB) с полной точностью
            </summary>
        </member>
        <member name="P:KlotosLib.ByteQuantity.Kilobytes">
            <summary>
            Возвращает текущее значение в килобайтах (KB) с полной точностью
            </summary>
        </member>
        <member name="P:KlotosLib.ByteQuantity.Megabytes">
            <summary>
            Возвращает текущее значение в мегабайтах (MB) с полной точностью
            </summary>
        </member>
        <member name="P:KlotosLib.ByteQuantity.Gigabytes">
            <summary>
            Возвращает текущее значение в гигабайтах (GB) с полной точностью
            </summary>
        </member>
        <member name="P:KlotosLib.ByteQuantity.Terabytes">
            <summary>
            Возвращает текущее значение в терабайтах (TB) с полной точностью
            </summary>
        </member>
        <member name="P:KlotosLib.ByteQuantity.Petabytes">
            <summary>
            Возвращает текущее значение в петабайтах (PB) с полной точностью
            </summary>
        </member>
        <member name="T:KlotosLib.FilePathTools">
            <summary>
            Содержит статические методы по работе с именами файлов и путями
            </summary>
        </member>
        <member name="M:KlotosLib.FilePathTools.DeleteExtension(System.String)">
            <summary>
            Удаляет расширение из имени файла, если находит точку и перед ней есть какие-нибудь символы
            </summary>
            <param name="Filename">Имя файла</param>
            <returns>Входная строка без расширения имени файла</returns>
        </member>
        <member name="M:KlotosLib.FilePathTools.IsValidFilename(System.String)">
            <summary>
            Определяет, является ли указанное название файла валидным
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.FilePathTools.IsValidFilePath(System.String)">
            <summary>
            Определяет, является ли указанный путь валидным. Поддерживает абсолютные и относительные пути, с названиями файлов и без, а также названия файлов без путей
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.FilePathTools.TryCleanFilename(System.String,System.String@)">
            <summary>
            Пытается очистить указанную строку, представляющую название файла (без пути), от недопустимых символов, если таковые присутствуют. 
            Если очистка успешна, возвращает 'true' и очищенное коректное имя файла через выводной параметр. 
            Если же указанную строку невозможно очистить, возвращает 'false' и NULL через выводной параметр.
            </summary>
            <param name="Input">Строка, представляющая имя файла без пути</param>
            <param name="FixedFilename">Выводной параметр, содержащий очищенное имя файла, если его удалось очистить</param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.StringTools">
            <summary>
            Содержит статические методы по работе с классическими и изменяемыми строками, не являющиеся методами расширения
            </summary>
        </member>
        <member name="T:KlotosLib.StringTools.Direction">
            <summary>
            Определяет направление поиска подстроки в строке
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.Direction.FromStartToEnd">
            <summary>
            Искать от начала до конца строки
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.Direction.FromEndToStart">
            <summary>
            Искать с конца в начало строки
            </summary>
        </member>
        <member name="T:KlotosLib.StringTools.StringAnalyzers">
            <summary>
            Содержит статические методы, возвращающие те или иные данные по переданным им строкам
            </summary>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.DefineContainsSymbols(System.String)">
            <summary>
            Определяет типы символов, которые содержатся в указанной строке, и возвращает их в виде перечисления с множеством флагов
            </summary>
            <param name="Input">Входная строка с любым значением</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.GetStartChars(System.String)">
            <summary>
            Определяет символ, с которого начинается указанная строка, и возвращает его вместе с количеством его экземпляров, идущих подряд с начала строки
            </summary>
            <example>Для строки "xxxyyyy" метод возвратит 'x:3'</example>
            <param name="Input">Входная строка. Если NULL или пустая, будет выброшено исключение.</param>
            <returns>Пара, где ключ - первый символ, а значение - количество идущих подряд экземпляров этого символа</returns>
            <exception cref="T:System.ArgumentException">Входная строка NULL или не содержит ни одного символа</exception>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.StartWithCount(System.String,System.Char)">
            <summary>
            Возвращает количество идущего подряд с начала строки указанного символа
            </summary>
            <example>Для строки "xxxyyyy" и символа 'x' метод возвратит 3, а для любого другого символа - 0</example>
            <param name="Input">Строка, с начала которой необходимо искать указанный символ. Если NULL или пустая, будет выброшено исключение.</param>
            <param name="Start">Искомый символ, количество вхождений подряд которого следует возвратить</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Входная строка NULL или не содержит ни одного символа</exception>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.FindAppearanceBetweenStrings(System.String,System.String,System.StringComparison)">
            <summary>
            Сравнивает две указанные строки в соответствии с указанными опциями сравнения, и определяет, 
            являются ли строки равные, а если нет, то является ли одна из них частью другой. 
            Возвращает один из четырёх пунктов перечисления.
            </summary>
            <remarks>Бессмертный метод</remarks>
            <param name="First">Первая строка</param>
            <param name="Second">Вторая строка</param>
            <param name="Options">Опции поиска и сравнения</param>
            <returns>Один пункт специального перечисления</returns>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.GetNumberOfDistinctSymbolsInString(System.String)">
            <summary>
            Возвращает количество всех различающихся символов в указанной строке
            </summary>
            <param name="Input"></param>
            <returns>Если строка является NULL или пустой - возвращает 0, иначе число, большее за 0</returns>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.GetNumberOfDigits(System.String)">
            <summary>
            Возвращает количество цифр, которые присутствуют во входной строке
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.GetNumberOfOccurensesInString(System.String,System.String,System.StringComparison)">
            <summary>
            Возвращает количество вхождений указанной искомой подстроки во входной строке
            </summary>
            <param name="Input">Строка, в которой ищутся вхождения подстроки. Если NULL или пустая - генерируется исключение.</param>
            <param name="Seek">Искомая подстрока, вхождения которой ищутся в строке</param>
            <param name="CompareOption">Опции поиска подстроки</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.GetNumberOfOccurensesInString(System.String,System.Char)">
            <summary>
            Возвращает количество вхождений указанного искомого символа во входной строке
            </summary>
            <param name="Input">Входная строка. Если NULL или пустая - генерируется исключение.</param>
            <param name="Seek">Искомый символ, который ищется во входной строке.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.AllIndexesOf(System.String,System.String,System.StringComparison,System.Int32)">
            <summary>
            Возвращает список всех индексов (позиций) вхождения указанной подстроки в указанной входной строке, начиная с указанной позиции и используя указанный метод сравнения строк.
            </summary>
            <param name="Input">Входная строка, в которой ищутся подстроки. Если NULL или пустая - выбрасывается исключение.</param>
            <param name="Target">Целевая подстрока, позиции вхождения которой ищутся во входной строке. Если NULL или пустая - выбрасывается исключение.</param>
            <param name="CompareOption">Опция сравнения строк между собой.</param>
            <param name="StartIndex">Начальный индекс (начиная с 0 включительно) во входной строке, с которого включительно начинается поиск подстроки. 
            Если меньше 0 или больше фактической длины строки - выбрасывается исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.AllIndexesOf(System.String,System.Char,System.Int32)">
            <summary>
            Возвращает список всех индексов (позиций) вхождений указанного целевого символа в указанной входной строке, начиная поиск с указанной позиции
            </summary>
            <param name="Input">Входная строка, в которой ищутся символы. Если NULL или пустая - выбрасывается исключение.</param>
            <param name="Target">Целевой символ, индексы (позиции) вхождения которого ищутся во входной строке.</param>
            <param name="StartIndex">Начальный индекс (начиная с 0 включительно) во входной строке, с которого включительно начинается поиск подстроки. 
            Если меньше 0 или больше фактической длины строки - выбрасывается исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.GetCharOccurensesStats(System.String)">
            <summary>
            Возвращает статистику по количеству вхождений символов в указанной строке
            </summary>
            <param name="Input">Входная строка. Если NULL или пустая - будет возвращён пустой словарь</param>
            <returns>Словарь, где ключ - это символ, а значение - количество его вхождений в строке. Значение всегда больше 0.</returns>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.GetNearestUnsignedIntegerFromString(System.String,KlotosLib.StringTools.Direction,System.Boolean)">
            <summary>
            Возвращает одно ближайшее целое положительное число, извлечённое из начала или конца входной строки. 
            В зависимости от параметра RaiseException, если входная строка некорректная или в ней не найдено ни одной цифры, метод выбрасывает исключение или возвращает NULL.
            </summary>
            <param name="Input">Входная строка</param>
            <param name="Dir">Направление, по которому ищется число: с начала входной строки или с конца</param>
            <param name="RaiseException">Если true - при некорректной строке или ненахождении числа выбрасывается исключение; если false - возвращается NULL</param>
            <returns>Целое положительное число или NULL (если RaiseException = false)</returns>
            <exception cref="T:System.ArgumentException">Параметр RaiseException выставлен в true и входня строка пуста или не содержит ни одной цифры</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Значение перечисления направления находится некорректно</exception>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.GetNearestUnsignedIntegerFromString(System.String,System.Int32,System.Int32@)">
            <summary>
            Возвращает одно ближайшее целое положительное число, извлечённое из подстроки, которая вычленяется из входной строки из указанной позиции. 
            Если входная строка не содержит цифр вообще, возвращает NULL.
            </summary>
            <param name="Input">Входная строка</param>
            <param name="StartPosition">Позиция (индекс, начинается с 0), начиная с которой, в исходной строке следует проводить поиск. Если равно 0, в поиске участвует вся исходная строка</param>
            <param name="FindPosition">Выводной параметр. Позиция (индекс, начинается с 0) в исходной строке, в которой обнаружилось начало первого попавшегося числа. Если искомое число не обнаружилось, возвращает -1.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.GetPositionsOfTokenInString(System.String,System.String,System.StringComparison)">
            <summary>
            Возвращает список позиций (индексов) всех вхождений указанного токена в указанной строке
            </summary>
            <param name="Input">Строка, в которой ищутся вхождения подстроки (токена)</param>
            <param name="Token">Подстрока (токен), вхождения которой ищутся в строке</param>
            <param name="CompareOption">Опция сравнения строк между собой</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.IndexesOfTemplateFirstOccurense(System.String,System.String,System.String,System.Int32,System.Char[])">
            <summary>
            Возвращает индексы начала и конца первого вхождения указанного шаблона во входящей строке, начиная поиск с указанного индекса. 
            Подстрока считается совпавшей с шаблоном тогда и только тогда, когда она начинается с начального токена, заканчивается конечным токеном и 
            содержит между ними лишь и только все указанные внутренние символы. Если между начальным и конечным токенами содержатся 
            какие-либо другие символы, или хотя бы один из указанных внутренних символов не содержится между начальным и конечным, то такая подстрока отбраковывается.
            </summary>
            <param name="Input">Входная строка, в которой происходит поиск шаблона. Если NULL или пустая, будет выброшено исключение.</param>
            <param name="StartToken">Начальный токен, которым должен начинаться искомый шаблон. Если NULL или пустой, будет выброшено исключение.</param>
            <param name="EndToken">Конечный токен, которым должен заканчиваться искомый шаблон. Если NULL или пустой, будет выброшено исключение.</param>
            <param name="StartIndex">Позиция (индекс), с которой включительно начинается анализ строки. Если меньше 0, будет приведён к 0. 
            Если больше длины строки, будет выброшено исключение.</param>
            <param name="InnerSymbols">Символы, из которых состоит "промежность" искомого шаблона между начальными и конечными токенами. 
            Чтобы искомый шаблон считался валидным, его "промежность" должна состоять лишь и только из всех указанных символов. 
            Дублирующие символы игнорируются, учитываются только уникальные. Если массив является NULL или пуст, будет выброшено исключение.</param>
            <returns>Связка из индекса начала и индекса конца первого вхождения указанного шаблона во входящей строке, начиная с 0 включительно. Если шаблон не найден, возвращает два -1.</returns>
        </member>
        <member name="M:KlotosLib.StringTools.StringAnalyzers.IndexesOfTemplate(System.String,System.String,System.String,System.Int32,System.Char[],System.Char[],System.StringComparison)">
            <summary>
            Возвращает набор индексов начала и конца всех вхождений искомого шаблона в указанной строке, начиная поиск с указанного индекса. 
            Подстрока считается совпавшей с шаблоном тогда и только тогда, если начинается с указанного токена, оканчивается указанным токеном, и между токенами 
            содержит указанные обязательные и необязательные символы. Если между токенами содержатся какие-либо другие символы, 
            или же не содержится хотя бы одного из обязательных символов, то такая подстрока отбраковывается.
            </summary>
            <param name="Input">Входная строка, в которой происходит поиск шаблона. Если NULL или пустая, будет выброшено исключение.</param>
            <param name="StartToken">Начальный токен, которым должен начинаться искомый шаблон. Если NULL или пустой, будет выброшено исключение.</param>
            <param name="EndToken">Конечный токен, которым должен заканчиваться искомый шаблон. Если NULL или пустой, будет выброшено исключение.</param>
            <param name="StartIndex">Позиция (индекс), с которой включительно начинается анализ строки. Если меньше 0, будет приведён к 0. 
            Если больше длины строки, будет выброшено исключение.</param>
            <param name="RequiredInnerSymbols">Массив обязательных символов, все из которых должны присутствовать между начальным и конечным токеном. 
            Дублирующие символы игнорируются, учитываются только уникальные. Если NULL или пустой, предполагается, что обязательных символов нет.</param>
            <param name="OptionalInnerSymbols">Массив допустимых символов, которые могут, но не обязательны присутствовать между начальным и конечным токеном. 
            Дублирующие символы игнорируются, учитываются только уникальные. Если NULL или пустой, предполагается, что обязательных символов нет.</param>
            <param name="CompareOptions">Опции сравнения строк между собой</param>
            <returns>Словарь, где один элемент представляет индексы одного найденного токена: ключ содержит индекс начала токена, а значение - индекс его конца. 
            Если ни одного токена не найдено, возвращается пустой словарь.</returns>
        </member>
        <member name="T:KlotosLib.StringTools.StringAnalyzers.ContainsEntities">
            <summary>
            Типы символов, которые могут содержаться в строке и содержание которых может определяться методами
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.StringAnalyzers.ContainsEntities.Empty">
            <summary>
            Пустая строка или null, значение по умолчанию
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.StringAnalyzers.ContainsEntities.Spaces">
            <summary>
            Содержатся пробелы
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.StringAnalyzers.ContainsEntities.Controls">
            <summary>
            Содержатся управляющие символы
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.StringAnalyzers.ContainsEntities.Letters">
            <summary>
            Содержатся буквы алфавита
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.StringAnalyzers.ContainsEntities.Digits">
            <summary>
            Содержатся арабские цифры
            </summary>
        </member>
        <member name="T:KlotosLib.StringTools.StringAnalyzers.SubstringLocation">
            <summary>
            Перечисление, которое обозначает возможное равенство, неравенство и вхождение двух строк между собой
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.StringAnalyzers.SubstringLocation.Identical">
            <summary>
            Строки идентичны
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.StringAnalyzers.SubstringLocation.FirstInSecond">
            <summary>
            Первая строка является частью второй (входит во вторую как подстрока)
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.StringAnalyzers.SubstringLocation.SecondInFirst">
            <summary>
            Вторая строка является частью первой (входит в первую как подстрока)
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.StringAnalyzers.SubstringLocation.Different">
            <summary>
            Строки разные и ни одна из них не входит в другую
            </summary>
        </member>
        <member name="T:KlotosLib.StringTools.CharSeqGen">
            <summary>
            Содержит статические методы, генерирующие последовательности символов по заданным критериям
            </summary>
        </member>
        <member name="M:KlotosLib.StringTools.CharSeqGen.FromString(System.String)">
            <summary>
            Возвращает массив со всеми символами, присутствующими в указанной строке. Символы встречаются в массиве один раз и отсортированы по возрастанию.
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.CharSeqGen.DigitsOnly">
            <summary>
            Возвращает массив со всеми арабскими цифрами
            </summary>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.CharSeqGen.LatinLetters(KlotosLib.StringTools.CharSeqGen.LettersType)">
            <summary>
            Возвращает массив символов, представляющих все литеры латинского алфавита. Символы в массиве отсортированы и встречаются только один раз.
            </summary>
            <param name="LettersType">Категория литер, которая должна присутствовать в выводном массиве.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.CharSeqGen.DigitsAndLatinLetters(KlotosLib.StringTools.CharSeqGen.LettersType)">
            <summary>
            Возвращает массив символов, представляющих арабские цифры и все литеры латинского алфавита. Символы в массиве отсортированы и встречаются только один раз.
            </summary>
            <param name="LettersType">Категория литер, которая должна присутствовать в выводном массиве.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.CharSeqGen.FromRange(System.UInt16,System.UInt16)">
            <summary>
            Возвращает массив всех символов, чьи кодовые точки находятся в указанном диапазоне чисел
            </summary>
            <param name="Start">Кодовая точка начала диапазона, включительно</param>
            <param name="End">Кодовая точка конца диапазона, включительный</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.CharSeqGen.FromRange(System.Char,System.Char)">
            <summary>
            Возвращает массив всех символов, чьи кодовые точки находятся в указанном диапазоне символов
            </summary>
            <param name="Start">Символ начала диапазона, включительный</param>
            <param name="End">Символ конца диапазона, включительный</param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.StringTools.CharSeqGen.LettersType">
            <summary>
            Определяет категорию литер
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.CharSeqGen.LettersType.AllCase">
            <summary>
            Все литеры
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.CharSeqGen.LettersType.OnlyLowerCase">
            <summary>
            Только строчные литеры
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.CharSeqGen.LettersType.OnlyCapitalCase">
            <summary>
            Только заглавные литеры
            </summary>
        </member>
        <member name="T:KlotosLib.StringTools.ContainsHelpers">
            <summary>
            Содержит статические методы, расширяющие функционал String.Contains и возвращающие булевое значение
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.ContainsHelpers._ExceptionString_NullOrEmptyCharArray">
            <summary>
            "Коллекция с искомыми символами является NULL или не содержит ни одного элемента"
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.ContainsHelpers._ExceptionString_NullOrEmptyStrArray">
            <summary>
            "Коллекция с искомыми подстроками является NULL или не содержит ни одного элемента"
            </summary>
        </member>
        <member name="F:KlotosLib.StringTools.ContainsHelpers._ExceptionString_NullOrEmptyString">
            <summary>
            "Входная строка является NULL или пустой"
            </summary>
        </member>
        <member name="M:KlotosLib.StringTools.ContainsHelpers.ContainsAtLeastOneOf(System.String,System.String[])">
            <summary>
            Определяет, содержится ли во входной строке хотя бы одна из указанных подстрок. Если не найдена ни одна, возвращает "false".
            </summary>
            <param name="Input"></param>
            <param name="Seek"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ContainsHelpers.ContainsAtLeastOneOf(System.String,System.StringComparison,System.String[])">
            <summary>
            Определяет, содержится ли во входной строке хотя бы одна из указанных подстрок, используя для их поиска указанные опции сравнения. 
            Если не найдена ни одна подстрока, возвращает "false".
            </summary>
            <param name="Input">Исходная строка, в которой ищутся искомые подстроки. Если NULL или пустая, выбрасывается исключение.</param>
            <param name="ComparisonOptions">Опции сравнения строк между собой</param>
            <param name="Seek">Набор искомых подстрок. Если NULL или пуст, выбрасывается исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ContainsHelpers.ContainsAtLeastOneOf(System.String,System.Char[])">
            <summary>
            Определяет, содержится ли во входной строке хотя бы один из указанных символов. Если не найден ни один, возвращает 'false'. Если найден хотя бы один, возвращает 'true'.
            </summary>
            <param name="Input">Входная строка. Если NULL или пустая - генерирует исключение.</param>
            <param name="Seek">Массив искомых символов. Если NULL или пустой - генерируется исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ContainsHelpers.ContainsOnlyOneOf(System.String,System.String[])">
            <summary>
            Определяет, содержится ли в искомой строке одна и только одна из указанных подстрок. 
            Если не найдена ни одна или больше одной, возвращает "false".
            </summary>
            <param name="Input"></param>
            <param name="Seek"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ContainsHelpers.ContainsOnlyOneOf(System.String,System.Char[])">
            <summary>
            Определяет, содержится ли в искомой строке один и только один из указанных символов. 
            Если не найден ни один символ или найдено больше одного символа, возвращает 'false'.
            </summary>
            <param name="Input"></param>
            <param name="Seek"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ContainsHelpers.ContainsNoOneOf(System.String,System.String[])">
            <summary>
            Определяет, не содержится ли в искомой строке хотя бы одна из указанных подстрок. 
            Если найдена хотя бы одна подстрока, возвращает "false".
            </summary>
            <param name="Input"></param>
            <param name="Seek"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ContainsHelpers.ContainsNoOneOf(System.String,System.Char[])">
            <summary>
            Определяет, не содержится ли в искомой строке хотя бы один из указанных символов. 
            Если найден хотя бы один символ, возвращает "false".
            </summary>
            <param name="Input"></param>
            <param name="Seek"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ContainsHelpers.ContainsAllOf(System.String,System.StringComparison,System.String[])">
            <summary>
            Определяет, содержатся ли в искомой строке все из указанных подстрок. 
            Если хотя бы одной не содержится, возвращает "false".
            </summary>
            <param name="Input"></param>
            <param name="Seek"></param>
            <param name="CompareOption">Опции сравнения строк между собой</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ContainsHelpers.ContainsAllOf(System.String,System.Char[])">
            <summary>
            Определяет, содержатся ли в искомой строке все из указанных символов. 
            Если хотя бы одного не содержится, возвращает "false".
            </summary>
            <param name="Input"></param>
            <param name="Seek"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ContainsHelpers.ContainsAllAndOnlyOf(System.String,System.Char[])">
            <summary>
            Определяет, содержатся ли в искомой строке все из указаных символов и только они. 
            Если хотя бы одного не содержится, или хотя бы один символ искомой строки не из указанных, возвращает "false".
            </summary>
            <param name="Input"></param>
            <param name="Seek"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ContainsHelpers.ContainsAllRequiredAndOnlyAccepted(System.String,System.Char[],System.Char[])">
            <summary>
            Определяет, содержатся ли в искомой строке все до одного из указаных обязательных символов и принадлежат ли все остальные символы к указанным разрешенным. 
            Если в искомой строке нет хотя бы одного обязательного символа, возвращается 'false'. 
            Если хотя бы один символ искомой строки, не являющийся обязательным, отсутствует при этом в массиве разрешенных, возвращается "false". 
            При этом обязательное наличие в искомой строке всех или даже одного символа из разрешенного массива не требуется.  
            </summary>
            <param name="Input">Входная искомая строка, в которой проходит поиск</param>
            <param name="RequiredSymbols">Массив обязательных символов, все из которых должны присутствовать в искомой строке</param>
            <param name="AcceptedSymbols">Массив допустимых символов, которые не являются обязательными для присутствия, наличие которых допустимо в искомой строке.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ContainsHelpers.ContainsOnlyAllowed(System.String,System.Char[])">
            <summary>
            Определяет, содержатся ли в строке только разрешенные символы, указанные в параметре. Если хотя бы один символ не является разрешенным, возвращается 'false'. 
            При этом наличие во входной строке всех разрешенных символов не обязательно.
            </summary>
            <param name="Input">Входная строка. Если NULL или пустая - генерируется исключение.</param>
            <param name="AllowedSymbols">Массив разрешенных символов. Если NULL или пустой - генерируется исключение.</param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.StringTools.SubstringHelpers">
            <summary>
            Содержит статические методы, возвращающие подстроки из входящих строк
            </summary>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.SubstringFromEnd(System.String,System.Int32,System.Boolean,KlotosLib.StringTools.Direction)">
            <summary>
            Возвращает подстроку входной строки указанной длины, отсчитывая её с конца. Позволяет указать порядок символов в возвращаемой подстроке, 
            а также считывать ли строку до начала, если указанная длина превышает фактическую длину строки.
            </summary>
            <param name="Input"></param>
            <param name="Length"></param>
            <param name="UntilStart"></param>
            <param name="OutputDirection"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.RemoveFromStartToEndToken(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Возвращает входную строку, из которой удалены все подстроки, начинающиеся с указанного начального токена 
            и заканчивающиеся ближайшим указанным конечным токеном. 
            Удаляются как начальный и конечный токены, так и символы между ними.
            </summary>
            <param name="Input">Входящая строка, в которой происходит поиск.</param>
            <param name="StartToken">Начальный токен (подстрока), которым начинается удаляемая строка</param>
            <param name="EndToken">Конечный токен (подстрока), которым оканчивается удаляемая строка</param>
            <param name="CompOpt"></param>
            <returns>Новая строка. 
            Если начальный и конечный токены одинаковы, или хотя бы один из них отсутствует в искомой строке, 
            или исходная строка является NULL, пустой строкой либо содержит лишь пробелы, 
            либо хотя бы один из токенов является NULL, пробелом или пустой строкой, метод выбрасывает исключение.</returns>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.GetInnerStringBetweenTokens(System.String,System.String,System.String,System.Int32,System.StringComparison,System.Int32@)">
            <summary>
            Возвращает искомую подстроку из указанной исходной строки, которая размещена между указанным начальным и конечным токеном, причём указанные токены в неё не включаются. 
            Ведёт поиск от начала до конца строки, начиная с указанной позиции, и возвращает первое попавшееся совпадение. 
            Если указанных токенов не найдено, возвращает NULL.
            </summary>
            <param name="Input">Входная строка, содержащая токены, и внутри которой происходит поиск. Входная строка не может быть NULL, пустой или состоящей из одних пробелов.</param>
            <param name="StartToken">Начальный токен</param>
            <param name="EndToken">Конечный токен</param>
            <param name="Offset">Позиция исходной строки. Если 0 - поиск ведётся с начала. Если меньше 0 или больше длины исходной строки, выбрасывается исключение.</param>
            <param name="ComparisionOptions">Опции сравнения строк между собой</param>
            <param name="Position">Выводной параметр, содержащий позицию искомой подстроки. Если токенов не найдено, или выброшено исключение, содержит -1.</param>
            <returns>NULL - если не нашло</returns>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.GetInnerStringsBetweenTokens(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Возвращает подстроку, которая находится в искомой строке между указанными начальным и конечным токеном. 
            Возвращается столько подстрок, сколько в искомой строке встречается начальных и конечных токенов в прямом порядке.
            </summary>
            <param name="Input">Входная строка, содержащая токены, и внутри которой происходит поиск</param>
            <param name="StartToken">Начальный токен</param>
            <param name="EndToken">Конечный токен</param>
            <param name="CompOpt"></param>
            <returns>Список подстрок, находящихся между указанными токенами</returns>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.GetInnerStringsBetweenTokens(System.String,System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Возвращает все искомые подстроки вместе с их позициями из указанной строки, которые находятся между указанными начальными и конечными токенами. 
            Поиск ведётся с начала до конца строки, начиная с указанной позиции, и возвращает все попавшиеся совпадения. 
            Если указанных токенов не найдено, возвращает пустой словарь.
            </summary>
            <param name="Input">Входная строка, содержащая токены, и внутри которой происходит поиск. Входная строка не может быть NULL, пустой или состоящей из одних пробелов.</param>
            <param name="StartToken">Начальный токен, не может быть NULL или пустой строкой</param>
            <param name="EndToken">Конечный токен, не может быть NULL или пустой строкой</param>
            <param name="Offset">Позиция исходной строки. Если 0 - поиск ведётся с начала. Если меньше 0 или больше длины исходной строки, выбрасывается исключение.</param>
            <param name="ComparisionOptions">Опции сравнения строк между собой</param>
            <returns>Словарь ключей и значений, где ключ - это позиция начала вхождения искомой строки в указанную, а значение - сама искомая строка. Если ничего не найдено, является пустым.</returns>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.GetSubstringToToken(System.String,System.String,KlotosLib.StringTools.Direction,System.StringComparison)">
            <summary>
            Возвращает часть указанной входной строки, которая размещена от начала или от конца и до первого указанного токена
            </summary>
            <param name="Input">Входящая строка, из которой надо извлечь подстроку</param>
            <param name="Token">Токен, который определяет конец подстроки</param>
            <param name="Dir">Направление, с которого будет возвращена подстрока: из начала или из конца</param>
            <param name="CompareOptions">Опции сравнения строк между собой</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.TruncateToClosestToken(System.String,System.String,System.Boolean,KlotosLib.StringTools.Direction,System.StringComparison)">
            <summary>
            Возвращает исходную строку, в которой обрезана её часть от начала или от конца до ближайшего указанного токена
            </summary>
            <param name="Input">Входящая строка, из которой надо извлечь подстроку</param>
            <param name="Token">Токен, который определяет точку обрезания и также обрезается</param>
            <param name="LeaveToken">Если "true" - ближайший токен будет оставлен. Иначе он тоже будет удалён.</param>
            <param name="Dir">Направление, с которого будет обрезана подстрока: из начала или из конца</param>
            <param name="CompareOptions">Опции сравнения строк между собой</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.GetSubstringToTokenWithSpecifiedNumber(System.String,System.String,System.Byte,KlotosLib.StringTools.Direction,System.StringComparison)">
            <summary>
            Возвращает подстроку из входной строки, которая отчитывается от начала или от конца и до указанного вхожденя указанного токена.
            </summary>
            <param name="Input"></param>
            <param name="Token"></param>
            <param name="Number">Номер вхождения указанного токена, начиная с 1</param>
            <param name="Dir"></param>
            <param name="CompareOptions"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.GetSubstringToTokenWithSpecifiedNumber(System.String,System.String,System.Byte,System.Int32,System.StringComparison)">
            <summary>
            Возвращает подстроку из входной строки, которая отчитывается от указанной позиции и до указанного вхожденя указанного токена.
            </summary>
            <param name="Input"></param>
            <param name="Token">Номер вхождения указанного токена, начиная с 1</param>
            <param name="Number"></param>
            <param name="StartPosition"></param>
            <param name="CompareOptions"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.DeleteStartAndEndTokens(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Удаляет из входной строки указанную начальную и конечную подстроки, если они есть. Если их нет, то возвращается исходная строка. 
            Если во входной строке содержится множество вложенных один в другой начальных и конечных токенов, метод удалит их все рекурсивно.
            </summary>
            <param name="Input">Входная строка, из которой необходимо удалить все указанные начальные и конечные токены.</param>
            <param name="StartToken">Начальный токен</param>
            <param name="EndToken">Конечный токен</param>
            <param name="CompOpt"></param>
            <returns>Новая строка, содержащая копию старой с удалёнными токенами</returns>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.CleanFromChars(System.String,KlotosLib.StringTools.StringAnalyzers.ContainsEntities)">
            <summary>
            Удаляет из входной строки все символы, которые не подпадают под допустимые
            </summary>
            <param name="Input">Входная строка, которую следует "почистить". Если NULL или пустая, возвращается без изменений</param>
            <param name="AllowedSymbols">Допустимые клссы символов. Если содержит неопределённое значение, входная строка возвращается без изменений.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.SecureSQLQuery(System.String)">
            <summary>
            Защищает входную строку от SQL-инъекции, экранируя одинарные кавычки
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.ConcatenateAllStringsManyTimes(System.Int32,System.String[])">
            <summary>
            Конкатенирует все указанные строки в одну и дублирует её указанное количество раз, конкатенируя каждый новый дубль к предыдущему
            </summary>
            <remarks>Детерминированный бессмертный метод, не бросающий исключений</remarks>
            <param name="IterationsCount">Количество дублей конкатенированных строк, которые необходимо совершить. Если равен 0, возвращается пустая строка.</param>
            <param name="Input">Массив от одной включительно и больше строк, которые необходимо конкатенировать. 
            Если не содержит ни одной строки, не являющейся NULL или пустой, метод возвращает пустую строку.</param>
            <returns>Одна строка</returns>
        </member>
        <member name="M:KlotosLib.StringTools.SubstringHelpers.ShrinkSpaces(System.String)">
            <summary>
            Уплотняет пробелы в указанной строка, сокращая множественные подряд идущие пробелы до одного
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.StringTools.ValidatorHelpers">
            <summary>
            Содержит статические методы, определяющие соответствие или несоответствие входной строки определённым критериям
            </summary>
        </member>
        <member name="M:KlotosLib.StringTools.ValidatorHelpers.IsAllStringsNotNullEmptyWS(System.String[])">
            <summary>
            Если метод возвращает "true" - ни одна из входных строк не является NULL, пустой или состоящей из одних пробелов. Иначе "false".
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ValidatorHelpers.IsAllStringsHasVisibleChars(System.String[])">
            <summary>
            Определяет наличие видимых символов в наборе строк. Возвращает трит: если true - все до одной строки имеют видимые символы; если false - ни одна строка не имеет видимых символов; 
            если null - часть строк имеет видимые символы, а часть - нет. Для валидации строк используется метод HasVisibleChars.
            </summary>
            <param name="Input">Набор строк. Если NULL или пустой - будет выброшено исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ValidatorHelpers.IsValidGuid(System.String)">
            <summary>
            Проверяет, может ли указанная строка быть успешно преобразована в тип GUID, являющийся 128-битным числом.
            </summary>
            <remarks>Осторожно: регекспы</remarks>
            <param name="Input">Входная строка, которую надо проверить на совместимость с GUID</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringTools.ValidatorHelpers.IsValidEmail(System.String)">
            <summary>
            Проверяет, является ли данная строка корректным адресом электронной почты
            </summary>
            <remarks>Осторожно: регекспы</remarks>
            <param name="Input"></param>
            <returns>Если true - является</returns>
        </member>
        <member name="T:KlotosLib.StringTools.ParsingHelpers">
            <summary>
            Содержит статические методы, выполняющие парсинг входной строки в определённые формы
            </summary>
        </member>
        <member name="M:KlotosLib.StringTools.ParsingHelpers.ParseInputStringToNumbers``1(System.String,System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Разбивает входную строку по указанному разделителю и возвращает список чисел указанного типа, 
            извлечённых с получившихся подстрок с применением указанных параметров парсинга
            </summary>
            <param name="Input">Входная строка, из которой требуется извлечь числа</param>
            <param name="Divider">Разделитель - строка, по которой выполняется разбиение входной строки. Не может быть NULL или пустой</param>
            <param name="Style">Правила парсинга числовой строки</param>
            <param name="CultureProvider">Формат языка и региональных параметров, с применением которого будет парситься строка. Если NULL, будет применён инвариантный формат.</param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.ImageTools">
            <summary>
            Содержит инструменты по работе с графическими изображениями
            </summary>
        </member>
        <member name="M:KlotosLib.ImageTools.IsIn(KlotosLib.ImageTools.ImageFormats,KlotosLib.ImageTools.ImageFormats)">
            <summary>
            Определяет, находится ли единичное значение Single внутри комбинированного значения Combined
            </summary>
            <param name="Single"></param>
            <param name="Combined"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.Contains(KlotosLib.ImageTools.ImageFormats,KlotosLib.ImageTools.ImageFormats)">
            <summary>
            Определяет, содержит ли комбинированное значение Combined внутри себя единичное значения Single
            </summary>
            <param name="Combined"></param>
            <param name="Single"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.CalculateNewSizeWithAspectRatio(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Вычисляет размер (ширина и высота), к которым необходимо привести изображение с указанным исходным размером таким образом,
            чтобы полученные размеры не превышали целевые размеры и чтобы сохранялось соотношение сторон
            </summary>
            <param name="SourceSize">Исходный размер изображения, которое надо изменить</param>
            <param name="TargetSize">Целевой размер изображения, по которому необходимо ограничить выдачу</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.CalculateNewSizeWithAspectRatio(System.Drawing.Size,System.Int32)">
            <summary>
            Вычисляет размер (ширина и высота), к которым необходимо привести изображение с указанным исходным размером таким образом,
            чтобы высота полученного размера равнялась целевой высоте, а ширина подстраивалась автоматически с сохранением соотношения сторон. 
            Метод работает в обе стороны - если исходная высота была меньше целевой, выходные размеры будут увеличены.
            </summary>
            <param name="SourceSize">Исходный размер изображения, которое надо изменить</param>
            <param name="TargetHeight">Целевая высота, которая должна быть в выходном размере</param>
            <returns>Новый размер</returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ReduceImageToPNG(System.Drawing.Image,System.UInt16)">
            <summary>
            Возвращает уменьшенную версию указанного изображения, сконвертированную в PNG для поддержки прозрачности и уменьшенную до указанной высоты с сохранением соотношения сторон. 
            Если высота исходного изображения уже меньше желаемой высоты, метод возвращает NULL.
            </summary>
            <param name="SourceImage">Исходное изображение, которое необходимо уменьшить к указанной высоте. В любом случае не затрагивается.</param>
            <param name="DesiredHeight">Высота, к которой необходимо уменьшить исходное изображение</param>
            <returns>Новое изображение в формате PNG с наилучшими настройками качества или NULL</returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ResizeImageToPNG(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Проводит изменение размеров изображения (ресайзинг), увеличивая или уменьшая его и сохраняя соотношение сторон, а также прозрачность. 
            Возвращает новое изображение в формате PNG в виде массива байтов.
            </summary>
            <param name="SourceImage">Исходное изображение, которое необходимо подстроить под указанный размер</param>
            <param name="DesiredSize">Размеры, до которых следует привести исходное изображение</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ResizeImageToJPEG(System.Byte[],System.Drawing.Size)">
            <summary>
            Изменяет размеры указанного изображения на указанные, делая 'жесткий' ресайзинг и не сохраняя соотношение сторон. 
            Сохраняет отресайзенное изображение в JPEG с настройкой качества 90%.
            </summary>
            <param name="SourceImage">Исходное изображение в виде байтового массива. Если массив некорректен или не может быть преобразован в изображение, метод выбрасывает исключение.</param>
            <param name="NewSize"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ResizeImageToBitmap(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Проводит изменение размеров изображения (ресайзинг), увеличивая или уменьшая его и сохраняя соотношение сторон
            </summary>
            <param name="ImageToResize">Изображение, размеры которого необходимо изменить. Метод не затрагивает это изображение, а создаёт его иззменённую копию.</param>
            <param name="DesiredSize">Размеры, до которых следует привести исходное изображение</param>
            <returns>Новое точечное изображение, содержащее изменённое исходное изображение</returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ReduceImageToBitmap(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Сравнивает размеры указанного изобажения с указанными желаемыми размерами, 
            и если фактические размеры превышают желаемые, метод возвращает новое изображение, 
            содержащее уменьшенную до желаемых размеров копию исходного изображения без искажений соотношения сторон
            </summary>
            <param name="ImageToReduce">Оригинальное изображение, которое не затрагивается</param>
            <param name="DesiredSize">Желаемый размер, к которому необходимо уменьшить исходное изображение. 
            Если исходное изобажение имеет меньший за указанный размер, возвращаеся его копия без изменения размеров.</param>
            <returns>В любом случае возвращается новое изображение, а не ссылка на старое</returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ConvertAndReduceImageIfNeeded(System.Drawing.Bitmap,System.Drawing.Size,KlotosLib.ImageTools.ImageFormats,System.Boolean@)">
            <summary>
            Анализирует входящее изображение на предмер линейных размеров и формата и возвращает его в виде масива байтов. 
            Если формат изображения отсутствует в списке разрешенных форматов, метод конвертирует его в PNG (для сохранения прозрачности) и в пределах указанного размера. 
            Если формат изображения допустимый, метод проверяет его линейные размеры, и если они превышают указанный размер, 
            то изображение конвертируется в PNG (для сохранения прозрачности) с указанным размером. 
            Если исходный формат изображения - JPEG, но оно превышает допустимые размеры, то метод конвертирует его в JPEG, а не PNG, так как в исходном изображении не может быть прозрачности. 
            Если изображение находится в допустимом формате и с допустимыми размерами, то оно не конвертируется, а лишь преобразовывается в байтовый массив, 
            и в выводном параметре содержится 'false'.
            </summary>
            <param name="SourceImage">Исходное изображение, которое необходимо проанализировать на соответствие указанным критериям.</param>
            <param name="DesiredSize">Желаемые линейные размеры, которые не могут быть превышены</param>
            <param name="AcceptedFormats">Список допустимых форматов изображения в виде битового перечисления.</param>
            <param name="WasConverted">Если 'true' - метод провёл конвертацию изображения и преобразовал его в PNG или в JPEG. 
            Если 'false' - метод не проводит конвертацию и возвратил нетронутое входящее изображение.</param>
            <returns>Байтовый массив, в который записывается новое изображение или неизменённое старое. В любом случае исходное изображение не изменяется.</returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ConvertAndReduceImageIfNeeded(System.Drawing.Bitmap,System.Drawing.Size,KlotosLib.ImageTools.ImageFormats,System.Boolean@,System.Boolean@,System.Drawing.Size@,KlotosLib.ImageTools.ImageFormats@)">
            <summary>
            Анализирует входящее изображение на предмер линейных размеров и формата и возвращает его в виде байтового масива. При необходимости и в зависимости от указанных параметров 
            метод конвертирует изображение в PNG и/или уменьшает его линейные размеры.
            </summary>
            <param name="SourceImage">Исходное изображение в виде битовой карты. Если NULL - будет выброшено исключение.</param>
            <param name="DesiredSize">Желаемый размер, ни одна из величин которого не может быть превышена</param>
            <param name="AcceptedFormats">Список допустимых форматов для входного изображения в виде битового перечисления. 
            Если формат входного изображения попадает в данный набор, то оно в нём и будет сохранено. Если же не попадает, то будет сохранено в PNG.</param>
            <param name="WasConverted">Был ли изменён формат изображения</param>
            <param name="WasResized">Были ли изменены линейные размеры изображения</param>
            <param name="NewSize">Новые линейные размеры изображения, могут совпадать со старыми, если ресайзинг не проводился</param>
            <param name="NewFormat">Новый формат, может совпадать со старым, если конвертация в другой формат не проводилась</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.CropImage(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Выполняет обрезку указанного изображения по указанным размерам, возвращая обрезанную версию в виде нового изображения и не затрагивая старое
            </summary>
            <param name="Source">Исходное изображение, которое следует обрезать. Не затрагивается методом. Если NULL, выбрасывается исключение.</param>
            <param name="CropArea">Область обрезки. Если хотя бы один из размеров является 0, выбрасывается исключение. Координаты при этом могут быть нулевыми.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.IsValidImage(System.IO.Stream)">
            <summary>
            Определяется, является ли входной поток корректным изображением, с котором может работать .NET
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.GetMime(KlotosLib.ImageTools.ImageFormats)">
            <summary>
            Возвращает MIME-тип для данного формата изображения. Если значение содержит множество форматов, ни одного или значение некорректно, возвращает NULL.
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.GetFileExtension(KlotosLib.ImageTools.ImageFormats)">
            <summary>
            Возвращает расширение имени файла для данного формата без точки. Если значение содержит множество форматов, ни одного или значение некорректно, возвращает NULL.
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ToInternalFormat(KlotosLib.ImageTools.ImageFormats)">
            <summary>
            Преобразовывает внешний формат в экземпляр класса ImageFormat в случае успеха или в NULL в случае провала
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ToEnumFormat(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Преобразовывает внутренний формат в ивде экземпляра класса ImageFormat во внешний в виде перечисления. В случае провала возвращает значение None.
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.GetImageFormat(System.Drawing.Image)">
            <summary>
            Определяет формат входного изображения и возвращает его в виде перечисления. Поддерживаются JPEG, PNG, BMP, GIF, TIFF, ICO. 
            Если входное изображение не принадлежит ни к одному из этих форматов, возвращается None.
            </summary>
            <param name="SourceImage">Входное изображение, чей формат нужно определить. Если NULL, метод возвращает None.</param>
            <returns>Лишь и только одно значение из перечисления ImageFormats</returns>
        </member>
        <member name="M:KlotosLib.ImageTools.GetImageFormatAndMIME(System.Drawing.Image,System.String@)">
            <summary>
            Определяет формат входного изображения и возвращает его, а также его MIME-тип в виде строки. 
            Поддерживаются JPEG, PNG, BMP, GIF, TIFF, ICO. 
            Если входное изображение не принадлежит ни к одному из этих форматов, оба выводных параметра содержат NULL.
            </summary>
            <param name="SourceImage">Входное изображение, формат которого следует определить</param>
            <param name="MimeType">Выводной параметр: MIME-тип поданного на вход изображения</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.GetImageMime(System.Drawing.Image)">
            <summary>
            Возвращает MIME-токен указанного изображения в виде строки или NULL, если изображение NULL или его формат не может быть определён
            </summary>
            <param name="SourceImage"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.GetImageMime(KlotosLib.ImageTools.ImageFormats)">
            <summary>
            Возвращает MIME-токен указанного формата изображения в виде строки или NULL, если формат = None
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ConvertDataToBitmap(System.IO.Stream)">
            <summary>
            Конвертирует входной поток в точечный рисунок, возвращая NULL, если входной поток не может быть сконвертирован в рисунок
            </summary>
            <param name="InputStream">Входной поток, в котором, по идее, должно находится изображение</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ConvertDataToBitmap(System.Byte[])">
            <summary>
            Конвертирует входной массив байтов в точечный рисунок, возвращая NULL, если входной массив не может быть сконвертирован в рисунок
            </summary>
            <param name="ByteArray"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ConvertDataToBitmap(System.String)">
            <summary>
            Конвертирует файл с указанным полным путём в точечный рисунок, возвращая NULL, если входной файл не может быть сконвертирован в рисунок, или если он не найден по указанному пути
            </summary>
            <param name="FilePath">Полный путь до файла</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ConvertImageToStreamJPEG(System.Drawing.Image)">
            <summary>
            Конвертирует изображение в формат JPEG с настройкой качества в 90% и возвращает его в виде потока
            </summary>
            <param name="SourceImage"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ConvertBitmapToByteArrayJPEG(System.Drawing.Bitmap)">
            <summary>
            Конвертирует точечное изображение в массив байтов, сохраняя его в формате JPEG с настройками по-умолчанию
            </summary>
            <param name="SourceBitmap"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.ConvertBitmapToByteArrayPNG(System.Drawing.Bitmap)">
            <summary>
            Конвертирует точечное изображение в формат PNG с настройкой качества в 90% и возвращает его в байтового массива
            </summary>
            <param name="SourceBitmap"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.SaveToByteArray(System.Drawing.Bitmap)">
            <summary>
            Сохраняет изображение в байтовый массив в тот формат, в котором оно было изначально и с настройками качества в 90%. 
            Если исходный формат изображения неизвестен, сохраняет его в PNG.
            </summary>
            <param name="SourceBitmap"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.SaveToByteArray(System.Drawing.Bitmap,KlotosLib.ImageTools.ImageFormats)">
            <summary>
            Сохраняет изображение в байтовый массив в указанный формат и с настройками качества в 90%. Если указанный формат некорректен, выбрасывает исключение.
            </summary>
            <param name="SourceBitmap"></param>
            <param name="SaveFormat"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.GetEncoderInfo(System.String)">
            <summary>
            Возвращает объект ImageCodecInfo на основании входного MIME или NULL, если для указанного MIME не найдено соответствия
            </summary>
            <param name="MimeType"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.GetEncoderInfo(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Возвращает объект ImageCodecInfo на основании входного ImageFormat или NULL, если для указанного ImageFormat не найдено соответствия
            </summary>
            <param name="Format"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.GetGifSizeFromHeader(System.Byte[])">
            <summary>
            Извлекает разрешение (ширину и высоту) из указанного хидера, взятого в изображения формата GIF
            </summary>
            <param name="Header">Хидер GIF-файла, содержащий первые 10 байт</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.GetPngSizeFromHeader(System.Byte[])">
            <summary>
            Извлекает разрешение (ширину и высоту) из указанного хидера, взятого в изображения формата PNG
            </summary>
            <param name="Header">Хидер PNG-файла, содержащий первые 24 байта</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ImageTools.GetImageFormat(System.Byte[])">
            <summary>
            Определяет формат изображения по его хидеру и возвращает формат в виде значения перечисления. Если формат определить не удалось, возвращает None. 
            Поддерживаются все форматы, доступные в перечислении: JPEG, PNG, BMP, TIFF, GIF, ICO.
            </summary>
            <remarks>
            Ресурсы:
            http://www.mikekunz.com/image_file_header.html
            http://www.libpng.org/pub/png/spec/1.1/PNG-Rationale.html#R.PNG-file-signature
            http://en.wikipedia.org/wiki/ICO_(file_format)
            </remarks>
            <param name="HeaderPart">Хидер файла - его первые 12 байт. Если содержит меньше 12 байт, выбрасывается исключение.</param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.ImageTools.ImageFormats">
            <summary>
            Битовое перечесление с допустимыми форматами изображений, содержащее стартовый флаг неизвестного формата
            </summary>
        </member>
        <member name="F:KlotosLib.ImageTools.ImageFormats.None">
            <summary>
            Формат изображения неизвестен или не указан
            </summary>
        </member>
        <member name="F:KlotosLib.ImageTools.ImageFormats.JPEG">
            <summary>
            JPEG = 1
            </summary>
        </member>
        <member name="F:KlotosLib.ImageTools.ImageFormats.PNG">
            <summary>
            PNG = 2
            </summary>
        </member>
        <member name="F:KlotosLib.ImageTools.ImageFormats.GIF">
            <summary>
            GIF = 4
            </summary>
        </member>
        <member name="F:KlotosLib.ImageTools.ImageFormats.TIFF">
            <summary>
            TIFF = 8
            </summary>
        </member>
        <member name="F:KlotosLib.ImageTools.ImageFormats.BMP">
            <summary>
            BMP = 16
            </summary>
        </member>
        <member name="F:KlotosLib.ImageTools.ImageFormats.ICO">
            <summary>
            ICO = 32
            </summary>
        </member>
        <member name="T:KlotosLib.EnumerationTools">
            <summary>
            Extension methods to make working with Enum values easier
            </summary>
            <remarks>Copyright: Hugo Bonacci. http://hugoware.net/blog/enumeration-extensions-2-0 </remarks>
        </member>
        <member name="M:KlotosLib.EnumerationTools.IncludeTo``1(System.Enum,``0)">
            <summary>
            Includes an enumerated type and returns the new value
            </summary>
        </member>
        <member name="M:KlotosLib.EnumerationTools.DeleteFrom``1(System.Enum,``0)">
            <summary>
            Removes an enumerated type and returns the new value
            </summary>
        </member>
        <member name="M:KlotosLib.EnumerationTools.Contains``1(System.Enum,``0)">
            <summary>
            Checks if an enumerated type contains a value
            </summary>
        </member>
        <member name="M:KlotosLib.EnumerationTools.Misses``1(System.Enum,``0)">
            <summary>
            Checks if an enumerated type is missing a value
            </summary>
        </member>
        <member name="T:KlotosLib.StringBuilderExtensionMethods">
            <summary>
            Содержит методы расширения для изменяемого строкового типа StringBuilder
            </summary>
        </member>
        <member name="M:KlotosLib.StringBuilderExtensionMethods.IsNullOrEmpty(System.Text.StringBuilder)">
            <summary>
            Определяет, является ли изменяемая строка NULL или пустой
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringBuilderExtensionMethods.HasAlphaNumericChars(System.Text.StringBuilder)">
            <summary>
            Определяет, содержится ли в изменяемой строке хотя бы один цифро-буквенный символ. Если содержится - возвращает true, если нет - false.
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringBuilderExtensionMethods.Clean(System.Text.StringBuilder)">
            <summary>
            Очищает содержимое изменяемой строки, усекая её длину (Length) до нуля, но оставляя внутренний буфер (Capacity) неизменённым. Изменения делаются именно в текущем экземляре, новый не создаётся.
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringBuilderExtensionMethods.LeftSubstring(System.Text.StringBuilder,System.Int32)">
            <summary>
            Обрезает символы из правой части (из конца) изменяемой строки, возвращая её левую часть, содержащую указанное количество символов, 
            и записывает изменение в этот же экземпляр
            </summary>
            <param name="Source">Входная изменяемая строка, обрезанную справа часть которой следует возвратить. 
            Если пустая - будет возвращена без изменений. Если NULL, будет выброшено исключение.</param>
            <param name="Count">Количество символов, которое останется после обрезки справа. Если 0, возвращается пустая строка. 
            Если равно или больше фактической длины входной строки, обрезание не производится и возвращается входная строка. Если меньше 0 - выбрасывается исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringBuilderExtensionMethods.RightSubstring(System.Text.StringBuilder,System.Int32)">
            <summary>
            Обрезает символы из левой части (из начала) изменяемой строки, возвращая её правую часть, содержащую указанное количество символов, 
            и записывает изменение в этот же экземпляр
            </summary>
            <param name="Source">Входная изменяемая строка, обрезанную слева часть которой следует возвратить. 
            Если пустая - будет возвращена без изменений. Если NULL, будет выброшено исключение.</param>
            <param name="Count">Количество символов, которое останется после обрезки слева. Если 0, возвращается пустая строка. 
            Если равно или больше фактической длины входной строки, обрезание не производится и возвращается входная строка. Если меньше 0 - выбрасывается исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringBuilderExtensionMethods.CutLeft(System.Text.StringBuilder,System.Int32)">
            <summary>
            Обрезает указанное количество символов из левой части (из начала) изменяемой строки и записывает изменение в этот же экземпляр
            </summary>        
            <param name="Source">Входная изменяемая строка, обрезанную слева часть которой следует возвратить. 
            Если пустая - будет возвращена без изменений. Если NULL, будет выброшено исключение.</param>
            <param name="Count">Количество символов, которое должно быть обрезано слева. Если 0, обрезание не производится и возвращается входная строка. 
            Если равно или больше фактической длины входной строки, возвращается пустая строка. Если меньше 0 - выбрасывается исключение.</param>        
        </member>
        <member name="M:KlotosLib.StringBuilderExtensionMethods.CutRight(System.Text.StringBuilder,System.Int32)">
            <summary>
            Обрезает указанное количество символов из правой части (из конца) изменяемой строки и записывает изменение в этот же экземпляр
            </summary>
            <param name="Source">Входная изменяемая строка, обрезанную справа часть которой следует возвратить. 
            Если пустая - будет возвращена без изменений. Если NULL, будет выброшено исключение.</param>
            <param name="Count">Количество символов, которое должно быть обрезано справа. Если 0, обрезание не производится и возвращается входная строка. 
            Если равно или больше фактической длины входной строки, возвращается пустая строка. Если меньше 0 - выбрасывается исключение.</param>
        </member>
        <member name="M:KlotosLib.StringBuilderExtensionMethods.Trim(System.Text.StringBuilder)">
            <summary>
            Удаляет из изменяемой строки все начальные и конечные пробелы и записывает изменение в этот же экземпляр
            </summary>
            <param name="Source">Входная изменяемая строка. Если NULL, будет выброшено исключение. Если пустая, будет возвращена без изменений.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringBuilderExtensionMethods.TrimStart(System.Text.StringBuilder,System.String,System.Boolean,System.Boolean)">
            <summary>
            Обрезает спереди (слева) изменяемую строку в случае, если она начинается с указанной подстроки, и записывает изменение в этот же экземпляр. 
            Параметры задают учёт регистра литер и необходимость рекурсивного обрезания.
            </summary>
            <param name="Source">Входная изменяемая строка, обрезанную слева часть которой следует возвратить. 
            Если пустая - будет возвращена без изменений. Если NULL, будет выброшено исключение.</param>
            <param name="Start">Строка, равная подстроке, с которой может начинаеться входная изменяемая строка и которую следует обрезать. 
            Если NULL, пустая, или больше длины входной строки, будет возвращена входная строка без изменений.</param>
            <param name="IgnoreCase">Определяет, игнорировать ли при сравнении символов регистр литер. true - игнорировать, false - принимать во внимание.</param>
            <param name="Recursive">Определяет, необходимо ли после первой обрезки проанализировать начало строки на совпадение ещё раз</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringBuilderExtensionMethods.TrimEnd(System.Text.StringBuilder,System.String,System.Boolean,System.Boolean)">
            <summary>
            Обрезает сзади (справа) изменяемую строку в случае, если она заканчивается указанной подстрокой, и записывает изменение в этот же экземпляр. 
            Параметры задают учёт регистра литер и необходимость рекурсивного обрезания.
            </summary>
            <param name="Source">Входная изменяемая строка, обрезанную справа часть которой следует возвратить. 
            Если пустая - будет возвращена без изменений. Если NULL, будет выброшено исключение.</param>
            <param name="End">Строка, равная подстроке, которой может оканчиваться входная изменяемая строка и которую следует обрезать. 
            Если NULL, пустая, или больше длины входной строки, будет возвращена входная строка без изменений.</param>
            <param name="IgnoreCase">Определяет, игнорировать ли при сравнении символов регистр литер. true - игнорировать, false - принимать во внимание.</param>
            <param name="Recursive">Определяет, необходимо ли после первой обрезки проанализировать конец строки на совпадение ещё раз</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringBuilderExtensionMethods.Reverse(System.Text.StringBuilder)">
            <summary>
            Обращает порядок символов в изменяемой строке на противоположный и записывает изменение в этот же экземпляр.
            </summary>
            <param name="Source"></param>
            <returns>Изменённый входной экземпляр</returns>
        </member>
        <member name="M:KlotosLib.StringBuilderExtensionMethods.Stuff(System.Text.StringBuilder,System.Int32,System.Int32,System.String)">
            <summary>
            Удаляет из изменяемой строки указанное количество символов, начиная с указанной позиции, и вставляет на их место указанную строку-заменитель
            </summary>
            <param name="Source">Входная изменяемая строка, в которой производится удаление и вставка. Если NULL - будет выброшено исключение. 
            Если пустая и указанная начальная позиция равна 0, в неё будет записано содержимое строки Replacement без изменений</param>
            <param name="StartIndex">Начальная позиция (индекс) во входной строке, с которой необходимо произвести удаление символов и на которую необходимо вставить 
            указанную строку-заменитель. Начинается с 0. Если значение больше фактической длины (не ёмкости) входной строки или меньше 0, выбрасывается исключение.</param>
            <param name="Length">Количество символов, которые необходимо удалить из входной строки. Если равно 0 - не будет удалён ни один символ, 
            а строка-заменитель просто внедрится во входную по указанной позиции. Если больше длины исходной строки с учётом смещения, указанного начальной позицией, 
            то удалится вся часть входной строки вплоть до конца. Если меньше 0 - будет выброшено исключение.</param>
            <param name="Replacement">Строка-заменитель, которая должна внедриться во входную строку. Если NULL - будет выброшено исключение. 
            Если пустая - будет произведено удаление символов, но вставки не будет.</param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.StreamTools">
            <summary>
            Содержит статические методы и методы-расширения по работе с потоками
            </summary>
        </member>
        <member name="M:KlotosLib.StreamTools.ReadFullStreamToByteArray(System.IO.Stream,System.Boolean)">
            <summary>
            Читает содержимое из указанного потока до достижении его конца и возвращает прочитанные данные внутри байтового массива
            </summary>
            <remarks>Code sample: Jon Skeet http://www.yoda.arachsys.com/csharp/readbinary.html</remarks>
            <param name="SourceStream">Поток, из которого нужно считать данные. Должен поддерживать чтение и при определённом значении параметра должен поддерживать поиск.</param>
            <param name="ResetPosition">Определяет, необходимо ли обнулить позицию ползунка в потоке <paramref name="SourceStream"/> перед началом чтения из него. 
            Если true - позиция обнуляется и поток читается с начала, однако в этом случае поток должен поддерживать операцию поиска (перемещения ползунка). 
            Если false - поток читается с текущей позиции, и поддержка операции поиска не требуется.</param>
        </member>
        <member name="M:KlotosLib.StreamTools.ReadFullStreamToByteArray(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Читает содержимое из указанного потока до достижении его конца и возвращает прочитанные данные внутри байтового массива. Для перекачки данных использует буфер указанного размера.
            </summary>
            <remarks>Code sample: Jon Skeet http://www.yoda.arachsys.com/csharp/readbinary.html</remarks>
            <param name="SourceStream">Поток, из которого нужно считать данные. Должен поддерживать чтение и при определённом значении параметра должен поддерживать поиск.</param>
            <param name="InitialLength">приблизительный начальный размер внутреннего буфера в байтах</param>
            <param name="ResetPosition">Определяет, необходимо ли обнулить (сбросить) позицию ползунка в потоке <paramref name="SourceStream"/> перед началом чтения из него. 
            Если true - позиция обнуляется и поток читается с начала, однако в этом случае поток должен поддерживать операцию поиска (перемещения ползунка). 
            Если false - поток читается с текущей позиции, и поддержка операции поиска не требуется.</param>
        </member>
        <member name="M:KlotosLib.StreamTools.CopyStream(System.IO.Stream,System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Копирует весь контент из одного потока в другой, используя внутренний буфер в 32КБ
            </summary>
            <param name="InputStream">Поток, из которого необходимо выполнить копирование контента</param>
            <param name="OutputStream">Поток, в который необходимо записать контент</param>
            <param name="ResetInputPosition">Определяет, необходимо ли обнулить (сбросить) позицию ползунка во входном потоке <paramref name="InputStream"/> 
            перед началом чтения из него. 
            Если true - позиция обнуляется и поток читается с начала, однако в этом случае поток должен поддерживать операцию поиска (перемещения ползунка). 
            Если false - поток читается с текущей позиции, и поддержка операции поиска не требуется.</param>
            <param name="ResetOutputPosition">Определяет, необходимо ли обнулить (сбросить) позицию ползунка в выходном потоке <paramref name="OutputStream"/> 
            перед началом записи в него. 
            Если true - позиция обнуляется и поток читается с начала, однако в этом случае поток должен поддерживать операцию поиска (перемещения ползунка). 
            Если false - поток читается с текущей позиции, и поддержка операции поиска не требуется.</param>
        </member>
        <member name="M:KlotosLib.StreamTools.CopyStream(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Копирует указанную часть контента из одного указанного потока в другой указанный поток, 
            определяя часть путём указания позиции в исходном потоке, с которой необходимо начать копирование, и количества байт, которые необходимо скопировать.
            </summary>
            <param name="InputStream">Поток, из которого необходимо выполнить копирование контента</param>
            <param name="OutputStream">Поток, в который необходимо записать контент</param>
            <param name="StartPosition">Позиция во входном потоке, с которой необходимо начать копирование, начиная с 0. Если больше или равна длине входного потока, выбрасывается исключение.</param>
            <param name="Length">Количество байт, которые необходимо скопирповать из входного потока. Если больше фактической длины оставшейся части, будет обрезано к ней.</param>
            <returns>Фактическое количество скопированных байт</returns>
        </member>
        <member name="M:KlotosLib.StreamTools.ReadPortion(System.IO.Stream,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Читает из указанного абстрактного потока указанное количество байт, начиная с указанной позиции, 
            и в зависимости от значения параметра возвращает или не возвращает ползунок на прежнее место. Не зависит от текущего значения ползунка.
            </summary>
            <param name="SourceStream">Поток, с которого производится чтение. Не может быть NULL, должен поддерживать чтение и поиск (перемещение ползунка).</param>
            <param name="Start">Позиция (начиная с 0), с которой производится начало чтения. Если меньше 0 или больше фактической длины потока, выбрасывается исключение.</param>
            <param name="Length">Длина диапазона в байтах, который необходимо считать с файлового потока. 
            Если превышает фактическую длину с учётом указанной позиции, метод возвращает всю оставшуюся часть. Если меньше 0 — выбрасывается исключение. Если 0 — возвращается пустой массив.</param>
            <param name="RenewPosition">Если true — после исполнения метода ползунок будет возвращён на ту же позицию, в которой он был изначально. 
            Если false — позиция ползунка не будет восстанавливаться.</param>
            <returns>Байтовый массив, не являющийся NULL и не превышающий длину <paramref name="Length"/>.</returns>
        </member>
        <member name="M:KlotosLib.StreamTools.SaveToFile(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Записывает весь контент из указанного потока в файл по указанному полному пути, создавая его или перезаписывая с нуля
            </summary>
            <param name="SourceStream">Входной поток, из которого выполняется копирование всего контента, вне зависимости от позиции ползунка. 
            Должен поддерживать чтение и поиск (перемещение ползунка).</param>
            <param name="FilePath">Путь, включая имя файла, который будет создан. Поддерживается как абсолютный, так и относительный путь. 
            Если файл по данному пути уже существует, он будет перезаписан. Если путь некорректен, будет выброшено исключение.</param>
            <param name="ResetSourcePosition">Определяет, необходимо ли обнулить (сбросить) позицию ползунка во входном потоке <paramref name="SourceStream"/> 
            перед началом чтения из него. 
            Если true - позиция обнуляется и поток читается с начала, однако в этом случае поток должен поддерживать операцию поиска (перемещения ползунка). 
            Если false - поток читается с текущей позиции, и поддержка операции поиска не требуется.</param>
        </member>
        <member name="T:KlotosLib.ExceptionTools">
            <summary>
            Содержит методы расширения, которые принимают определённый один аргумент и выбрасывают исключение 'ArgumentException', 
            если этот аргумент находится в недопустимых состояниях.
            </summary>
        </member>
        <member name="M:KlotosLib.ExceptionTools.ThrowIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Генерирует исключение 'ArgumentException', если входная последовательность NULL или пустая
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
        </member>
        <member name="M:KlotosLib.ExceptionTools.ThrowIfNullEmptyWS(System.String)">
            <summary>
            Генерирует исключение 'ArgumentException', если входная строка NULL, пустая или состоит из одних пробелов
            </summary>
            <param name="Source"></param>
        </member>
        <member name="M:KlotosLib.ExceptionTools.ThrowIfNullOrNotOpen(System.Data.SqlClient.SqlConnection)">
            <summary>
            Генерирует исключение 'ArgumentException', если входное подключение к БД является NULL или находится не в статусе 'Open'
            </summary>
            <param name="Source"></param>
        </member>
        <member name="M:KlotosLib.ExceptionTools.TotalMessage(System.Exception)">
            <summary>
            Возвращает название и текстовое описание указанного исключения и цепочки всех его вложенных под-исключений
            </summary>
            <param name="Ex">Исключение, полное текстовое описание которого следует возвратить. Если NULL, будет возвращена пустая строка.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.ExceptionTools.DisplayString(System.String)">
            <summary>
            Выводит на текстовую консоль все символы указанной строки в режиме отладки
            </summary>
            <remarks>Copyright: Jon Skeet. http://habrahabr.ru/post/165597/</remarks>
            <param name="text"></param>
        </member>
        <member name="T:KlotosLib.UnreachableCodeException">
            <summary>
            Исключение, вызов которого размещается в тех местах исходного кода, котороые в случае корректного функционирования алгоритмы должны быть недоступны для выполнения
            </summary>
        </member>
        <member name="M:KlotosLib.UnreachableCodeException.#ctor">
            <summary>
            Инициализирует новый экземпляр класса
            </summary>
        </member>
        <member name="M:KlotosLib.UnreachableCodeException.#ctor(System.String)">
            <summary>
            Выполняет инициализацию нового экземпляра класса UnreachableCodeException, используя указанное сообщение об ошибке.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:KlotosLib.UnreachableCodeException.#ctor(System.String,System.Exception)">
            <summary>
            Выполняет инициализацию нового экземпляра класса UnreachableCodeException с указанным сообщением об ошибке и ссылкой на внутреннее исключение, 
            которое стало причиной данного исключения.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:KlotosLib.UnreachableCodeException.Message">
            <summary>
            Возвращает сообщение, которое описывает текущее исключение.
            </summary>
        </member>
        <member name="T:KlotosLib.RandomGenerators">
            <summary>
            Служебный класс, обеспечивающий генерацию случайных строк и массивов указанной длины
            </summary>
        </member>
        <member name="F:KlotosLib.RandomGenerators._randomInstance">
            <summary>
            Единый экземпляр класса Random, который используется методами
            </summary>
        </member>
        <member name="F:KlotosLib.RandomGenerators._syncLock">
            <summary>
            Служебный объект для обеспечения потокобезопасности
            </summary>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GetRandomStringGUID(System.Int32)">
            <summary>
            Возвращает случайную строку указанной длины, содержащую числа и строчные буквы латинского алфавита, используя в качестве ГПСЧ механизм GUID.
            </summary>
            <remarks></remarks>
            <param name="Length">Желаемая длина сгенерированной строки. Если указан 0, возвращается пустая строка</param>
            <returns></returns>            
        </member>
        <member name="M:KlotosLib.RandomGenerators.GetRandomString(System.Int32)">
            <summary>
            Возвращает случайную строку указанной длины, содержащую цифры, строчные и заглавные буквы латинского алфавита. Использует собственный ГПСЧ.
            </summary>
            <param name="Length">Желаемая длина строки. Если меньше 0, выбрасывается исключение. Если 0 - возвращается пустая строка.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GetRandomString(System.Int32,System.Random)">
            <summary>
            Возвращает случайную строку указанной длины, содержащую цифры, строчные и заглавные буквы латинского алфавита. Использует указанный ГПСЧ.
            </summary>
            <param name="Length">Желаемая длина строки. Если меньше 0, выбрасывается исключение. Если 0 - возвращается пустая строка.</param>
            <param name="RandomInstance">Экземпляр ГПСЧ. Если null - будет выброшено исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GetAlphanumericPassword(System.Int32)">
            <summary>
            Возвращает случайную строку указанной длины, содержащую лишь числа, заглавные и строчные буква латинского алфавита, 
            но не содержащую цифру "0" и букву "O/o". Использует собственный ГПСЧ.
            </summary>        
            <param name="Length">Желаемая длина сгенерированной строки. Если меньше 0, выбрасывается исключение. Если 0 - возвращается пустая строка</param>        
            <returns>Сгенерированная случайным образом строка</returns>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GetAlphanumericPassword(System.Int32,System.Random)">
            <summary>
            Возвращает случайную строку указанной длины, содержащую лишь числа, заглавные и строчные буква латинского алфавита, 
            но не содержащую цифру "0" и букву "O/o". Использует указанный ГПСЧ.
            </summary>        
            <param name="Length">Желаемая длина сгенерированной строки. Если меньше 0, выбрасывается исключение. Если 0 - возвращается пустая строка</param>
            <param name="RandomInstance">Экземпляр ГПСЧ. Если null - будет выброшено исключение.</param>
            <returns>Сгенерированная случайным образом строка</returns>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GenerateRandomSequence``1(System.Int32)">
            <summary>
            Генерирует и возвращает массив указанной длины, заполненный элементами указанного типа. Использует собственный ГПСЧ.
            </summary>
            <typeparam name="TItem">Тип элементов. Поддерживаются только целые числа.</typeparam>
            <param name="Count">Количество элементов, которое должно содержать в выходном массиве. Если 0 - будет возвращён пустой массив. Если отрицательное - из него будет взят модуль.</param>        
            <returns></returns>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GenerateRandomSequence``1(System.Int32,System.Random)">
            <summary>
            Генерирует и возвращает массив указанной длины, заполненный элементами указанного типа. Использует указанный ГПСЧ.
            </summary>
            <typeparam name="TItem">Тип элементов. Поддерживаются только целые числа.</typeparam>
            <param name="Count">Количество элементов, которое должно содержать в выходном массиве. Если 0 - будет возвращён пустой массив. Если отрицательное - из него будет взят модуль.</param>
            <param name="RandomInstance">Экземпляр ГПСЧ. Если null - будет выброшено исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GenerateRandomStringSequence(System.Int32,System.Int32,System.Int32)">
            <summary>
            Генерирует и возвращает строковый массив указанной длины, все строки которого имеют длину в указанных пределах. Использует собственный ГПСЧ.
            </summary>
            <param name="MinStringLength">Минимальная длина строки включительно. Если меньше 0, будет выброшено исключение.</param>
            <param name="MaxStringLength">Максимальная длина строки исключительно. Если меньше 1 или минимальной границы, будет выброшено исключение.</param>
            <param name="Count">Количество элементов, которое должно содержать в выходном массиве. Если 0 - будет возвращён пустой массив. Если отрицательное - из него будет взят модуль.</param>        
            <returns></returns>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GenerateRandomStringSequence(System.Int32,System.Int32,System.Int32,System.Random)">
            <summary>
            Генерирует и возвращает строковый массив указанной длины, все строки которого имеют длину в указанных пределах. Использует указанный ГПСЧ.
            </summary>
            <param name="MinStringLength">Минимальная длина строки включительно. Если меньше 0, будет выброшено исключение.</param>
            <param name="MaxStringLength">Максимальная длина строки исключительно. Если меньше 1 или минимальной границы, будет выброшено исключение.</param>
            <param name="Count">Количество элементов, которое должно содержать в выходном массиве. Если 0 - будет возвращён пустой массив. Если отрицательное - из него будет взят модуль.</param>
            <param name="RandomInstance">Экземпляр ГПСЧ. Если null - будет выброшено исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GenerateRandomStringSequence(System.Int32,System.Int32,System.Int32,System.Char[])">
            <summary>
            Генерирует и возвращает строковый массив указанной длины, все строки которого имеют длину в указанных пределах и состоят только из указанных символов. 
            Использует собственный ГПСЧ.
            </summary>
            <param name="MinStringLength">Минимальная длина строки включительно. Если меньше 0, будет выброшено исключение.</param>
            <param name="MaxStringLength">Максимальная длина строки исключительно. Если меньше 1 или минимальной границы, будет выброшено исключение.</param>
            <param name="Count">Количество элементов, которое должно содержать в выходном массиве. Если 0 - будет возвращён пустой массив. Если отрицательное - из него будет взят модуль.</param>        
            <param name="AllowableChars">Набор допустимых символов, которые и только которые могут использоваться для генерации строк. Если null или пуст - выбрасывается исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GenerateRandomStringSequence(System.Int32,System.Int32,System.Int32,System.Random,System.Char[])">
            <summary>
            Генерирует и возвращает строковый массив указанной длины, все строки которого имеют длину в указанных пределах и состоят только из указанных символов. 
            Использует указанный ГПСЧ.
            </summary>
            <param name="MinStringLength">Минимальная длина строки включительно. Если меньше 0, будет выброшено исключение.</param>
            <param name="MaxStringLength">Максимальная длина строки исключительно. Если меньше 1 или минимальной границы, будет выброшено исключение.</param>
            <param name="Count">Количество элементов, которое должно содержать в выходном массиве. Если 0 - будет возвращён пустой массив. Если отрицательное - из него будет взят модуль.</param>
            <param name="RandomInstance">Экземпляр ГПСЧ. Если null - будет выброшено исключение.</param>
            <param name="AllowableChars">Набор допустимых символов, которые и только которые могут использоваться для генерации строк. Если null или пуст - выбрасывается исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GenerateRandomString(System.Int32,System.Char[])">
            <summary>
            Генерирует и возвращает изменяемую строку указанной длины, заполненную случайными символами, входящими в указанный набор. Использует собственный ГПСЧ.
            </summary>
            <param name="Length">Желаемая длина строки в символах. Если 0 - будет возвращена пустая строка. Если меньше 0 - будет выброшено исключение.</param>
            <param name="AllowableChars">Набор допустимых символов, которые и только которые могут использоваться для генерации строк. Если null или пуст - выбрасывается исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GenerateRandomString(System.Int32,System.Random,System.Char[])">
            <summary>
            Генерирует и возвращает изменяемую строку указанной длины, заполненную случайными символами, входящими в указанный набор. Использует указанный ГПСЧ.
            </summary>
            <param name="Length">Желаемая длина строки в символах. Если 0 - будет возвращена пустая строка. Если меньше 0 - будет выброшено исключение.</param>
            <param name="RandomInstance">Экземпляр ГПСЧ. Если null - будет выброшено исключение.</param>
            <param name="AllowableChars">Набор допустимых символов, которые и только которые могут использоваться для генерации строк. Если null или пуст - выбрасывается исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GenerateRandomStream(System.Int32,System.Boolean)">
            <summary>
            Генерирует и возвращает байтовый поток в памяти указанной длины, заполненный случайными байтами. Использует собственный ГПСЧ.
            </summary>
            <param name="Length">Желаемая длина байтового потока в байтах. Если 0 - будет возвращён пустой поток. Если меньше 0 - будет выброшено исключение.</param>
            <param name="ResetPosition">Определяет, необходимо ли после создания потока обнулить (сбросить) его ползунок.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.RandomGenerators.GenerateRandomStream(System.Int32,System.Boolean,System.Random)">
            <summary>
            Генерирует и возвращает байтовый поток в памяти указанной длины, заполненный случайными байтами. Использует указанный ГПСЧ.
            </summary>
            <param name="Length">Желаемая длина байтового потока в байтах. Если 0 - будет возвращён пустой поток. Если меньше 0 - будет выброшено исключение.</param>
            <param name="ResetPosition">Определяет, необходимо ли после создания потока обнулить (сбросить) его ползунок.</param>
            <param name="RandomInstance">Экземпляр ГПСЧ. Если null - будет выброшено исключение.</param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.NumericTools">
            <summary>
            Содержит методы расширения по работе с числами
            </summary>
        </member>
        <member name="M:KlotosLib.NumericTools.Rounding(System.Double,System.Byte)">
            <summary>
            Выполняет округление числа с плавающей запятой двойной точности с указанной точностью
            </summary>
            <param name="Value"></param>
            <param name="Digits">Точность округления, выраженная в количестве знаков после запятой, которые должны остаться. 
            Если больше фактического количества знаков, число будет возвращено без изменений.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.Rounding(System.Single,System.Byte)">
            <summary>
            Выполняет округление числа с плавающей запятой одинарной точности с указанной точностью
            </summary>
            <param name="Value"></param>
            <param name="Digits">Точность округления, выраженная в количестве знаков после запятой, которые должны остаться. 
            Если больше фактического количества знаков, число будет возвращено без изменений.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.Rounding(System.Decimal,System.Byte)">
            <summary>
            Выполняет округление числа с фиксированной запятой с указанной точностью
            </summary>
            <param name="Value"></param>
            <param name="Digits">Точность округления, выраженная в количестве знаков после запятой, которые должны остаться. 
            Если больше фактического количества знаков, число будет возвращено без изменений.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.GetDifferenceAbs(System.Int32,System.Int32)">
            <summary>
            Возвращает разницу между модулями указанных двух чисел
            </summary>
            <param name="First"></param>
            <param name="Last"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.GetFraction(System.Single,System.Byte)">
            <summary>
            Возвращает дробную часть числа с плавающей запятой одинарной точности без десятичного разделителя в виде строки. 
            В зависимости от значения параметра дробная часть возвращается полностью или с указанным количеством цифр, начиная со страших разрядов.
            </summary>
            <param name="Number"></param>
            <param name="FractionDigits">Количество цифр в дробной части, начиная со страших разрядов, которое требуется возвратить. 
            Если 0 — будут возвращены все цифры. Производится отсечение, но не округление.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.GetFraction(System.Double,System.Byte)">
            <summary>
            Возвращает дробную часть числа с плавающей запятой двойной точности без десятичного разделителя в виде строки. 
            В зависимости от значения параметра дробная часть возвращается полностью или с указанным количеством цифр, начиная со страших разрядов.
            </summary>
            <param name="Number"></param>
            <param name="FractionDigits">Количество цифр в дробной части, начиная со страших разрядов, которое требуется возвратить. 
            Если 0 - будут возвращены все цифры. Производится отсечение, но не округление.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.GetFraction(System.Decimal,System.Byte)">
            <summary>
            Возвращает дробную часть числа с фиксированной запятой без десятичного разделителя в виде строки. 
            В зависимости от значения параметра дробная часть возвращается полностью или с указанным количеством цифр, начиная со страших разрядов.
            </summary>
            <param name="Number"></param>
            <param name="FractionDigits">Количество цифр в дробной части, начиная со страших разрядов, которое требуется возвратить. 
            Если 0 - будут возвращены все цифры. Производится отсечение, но не округление.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.Summarial(System.Int32)">
            <summary>
            Возвращает сумму чисел от 1 и вплоть до указанного
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.Factorial(System.Int32)">
            <summary>
            Возвращает факториал числа
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.Combine(System.Byte,System.Byte)">
            <summary>
            Возвращает одно новое число типа UInt16, объединяя два указанных типа Byte
            </summary>
            <remarks>http://stackoverflow.com/a/827267</remarks>
            <param name="First"></param>
            <param name="Second"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.Split(System.UInt16)">
            <summary>
            Возвращает два новых 1-байтовых целых беззнаковых числа, разбивая поплам одно указанное 2-байтовое типа UInt16
            </summary>
            <param name="Number"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.Combine(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Возвращает новое число типа UInt32, объединяя 4 указанных числа типа Byte
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="Third"></param>
            <param name="Fourth"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.Split(System.UInt32,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Возвращает через выводные параметры 4 новых числа типа Byte, разбивая указанное число <paramref name="Number"/> на4 секции по по 8 бит
            </summary>
            <param name="Number"></param>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="Third"></param>
            <param name="Fourth"></param>
        </member>
        <member name="M:KlotosLib.NumericTools.Combine(System.Int32,System.Int32)">
            <summary>
            Возвращает одно новое число типа Int64, объединяя два указанных типа Int32
            </summary>
            <remarks>http://stackoverflow.com/a/827267</remarks>
            <param name="First"></param>
            <param name="Second"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.Split(System.Int64)">
            <summary>
            Возвращает два новых 4-байтовых целых знаковых числа, разбивая поплам одно указанное 8-байтовое типа Int64
            </summary>
            <param name="Number"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.Combine(System.UInt32,System.UInt32)">
            <summary>
            Возвращает одно новое число типа UInt64, объединяя два указанных типа UInt32
            </summary>
            <remarks>http://stackoverflow.com/a/827267</remarks>
            <param name="First"></param>
            <param name="Second"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.NumericTools.Split(System.UInt64)">
            <summary>
            Возвращает два новых 4-байтовых целых беззнаковых числа, разбивая поплам одно указанное 8-байтовое типа UInt64
            </summary>
            <param name="Number"></param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.HtmlTools">
            <summary>
            Содержит статические чистые методы по работе с XML и HTML
            </summary>
        </member>
        <member name="M:KlotosLib.HtmlTools.RemoveHTMLTags(System.String)">
            <summary>
            Удаляет из входной строки все одинарные и парные HTML-тэги с их атрибутами, оставляя их содержимое. Если входная строка не содержит HTML-тэгов, метод возвращает её без изменений. 
            Удаляются также некорректно расположенные HTML-тэги (неоткрытые, незакрытые и перехлестывающиеся).
            </summary>
            <param name="InputHTML">Входная HTML-содержащая строка</param>
            <returns>Копия входной строки, не содержащая никаких HTML-тегов</returns>
        </member>
        <member name="M:KlotosLib.HtmlTools.RemoveEmptyPairHTMLTags(System.String)">
            <summary>
            Удаляет из входной строки все парные HTML-тэги со всеми их атрибутами, которые не содержат внутри контента. 
            HTML-тэги, содержащие вложенные пустые тэги, также удаляются. Одиночные тэги не удаляются.
            </summary>
            <param name="InputHTML">Входная строка</param>
            <returns>Новая очищенная от пустых парных тэгов строка</returns>
        </member>
        <member name="M:KlotosLib.HtmlTools.AdjustTextToHtml(System.String)">
            <summary>
            Конвертирует указанную строку в HTML-совместимую форму, заменяя пробельные отступы и символы переноса, а также кодируя HTML-тэги, защищая клиент от атак XSS
            </summary>
            <param name="InputHTML"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.HtmlTools.FixBrokenXMLTags(System.String)">
            <summary>
            Анализирует входную XML-разметку на наличие некорректных парных тэгов, и если такие найдены, то исправляет их в корректной последовательности. 
            Если во входной строке нет некорректных парных тэгов или нет тэгов вообще, метод возвращает её без изменений.
            </summary>
            <param name="InputXML">Входная строка, содержащая предположительно некорректную XML-разметку</param>
            <returns>Гарантированно корректная XML-разметка</returns>
        </member>
        <member name="M:KlotosLib.HtmlTools.ValidateHtmlTag(System.String,System.String@)">
            <summary>
            Определяет, является ли входная строка корректным HTML-тэгом и если является, то каким: одиночным, парным открывающим или парным закрывающим.
            </summary>
            <param name="Tag">Строка, предположительно содержащая тэг. Поддерживаются любые строки, включая NULL. Любые символы, кроме пробелов, не являющися часть тэга, приводят к выводу NotTag.</param>
            <param name="TagName">Точное и чёткое имя тэга в нижнем регистре, без кавычек, пробелов и атрибутов, если они есть. Если входная строка не распознана как коректный тэг, содержит NULL.</param>
            <returns>Одно из значений перечисления, определяющее тип тэга</returns>
        </member>
        <member name="M:KlotosLib.HtmlTools.SecureScriptXSS(System.String)">
            <summary>
            Экранирует во входной строке все тэги &lt;script&gt; и &lt;/script&gt; для защиты от самых распространённых XSS-инъекций.
            </summary>
            <param name="InputHTML"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.HtmlTools.GetXElement(System.Xml.XmlNode)">
            <summary>
            Конвертирует узел XML-документа формата XmlNode в узел формата XElement (LINQ2XML)
            </summary>
            <param name="SourceNode"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.HtmlTools.GetXmlNode(System.Xml.Linq.XElement)">
            <summary>
            Конвертирует узел XML-документа формата XElement (LINQ2XML) в узел формата XmlNode
            </summary>
            <param name="SourceElement"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.HtmlTools.GetXDocument(System.Xml.XmlDocument)">
            <summary>
            Конвертирует XmlDocument в XDocument
            </summary>
            <param name="SourceDocument"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.HtmlTools.GetXmlDocument(System.Xml.Linq.XDocument)">
            <summary>
            Конвертирует XDocument в XmlDocument
            </summary>
            <param name="SourceDocument"></param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.HtmlTools.HtmlTagType">
            <summary>
            Определяет типы HTML-тэгов
            </summary>
        </member>
        <member name="F:KlotosLib.HtmlTools.HtmlTagType.NotTag">
            <summary>
            Не является тэгом
            </summary>
        </member>
        <member name="F:KlotosLib.HtmlTools.HtmlTagType.Single">
            <summary>
            Одиночный тэг
            </summary>
        </member>
        <member name="F:KlotosLib.HtmlTools.HtmlTagType.PairOpen">
            <summary>
            Открывающая часть парного тэга
            </summary>
        </member>
        <member name="F:KlotosLib.HtmlTools.HtmlTagType.PairClose">
            <summary>
            Закрывающая часть парного тэга
            </summary>
        </member>
        <member name="T:KlotosLib.DelegateTools">
            <summary>
            Содержит статические методы и методы расширения по работе с экземплярами делегатов
            </summary>
        </member>
        <member name="M:KlotosLib.DelegateTools.SimpleDelegatesCount(System.Delegate)">
            <summary>
            Возвращает количество простых делегатов в списке вызова данного экземпляра делегата.
            </summary>
            <param name="Del"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.DelegateTools.IsStaticDelegateMethod(System.Delegate,System.Boolean)">
            <summary>
            Определяет, является ли метод, на который указывает данный экземпляр делегата, статическим или экземплярным. 
            Если данный экземпляр делегата является комбинированным, метод выполняется по отношению к последнему простому делегаты в списке вызова.
            </summary>
            <param name="Del"></param>
            <param name="ThrowExIfNull">Определяет, выбрасывать ли исключение (true) или нет (false), если данный экземпляр делегата является null. 
            Если не выбрасывать и экземпляр делегата является null, метод возвратит false.</param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.StringExtensionMethods">
            <summary>
            Содержит методы расширения для строкового типа
            </summary>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.SubstringWithEnd(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Возвращает подстроку, которая начинается с указанного начального индекса и кончается указанным конечным индексом. 
            Булевые параметры позволяют указывать, включительными или исключительными являются начальный и конечный индексы, 
            а также считывать ли строку до конца, если конечный индекс выходить за её пределы.
            </summary>
            <param name="Input">Входная строка. Если NULL или пустая - будет выброшено исключение.</param>
            <param name="StartIndex">Начальный индекс (позиция), отсчёт ведётся начиная с 0. 
            Его включительность или исключительность определяется значением параметра <paramref name="IncludeStart"/>. 
            Если меньше 0 - выбрасывается исключение.</param>
            <param name="EndIndex">Конечный индекс (позиция), отсчёт ведётся начиная с 0. 
            Его включительность или исключительность определяется значением параметра <paramref name="IncludeEnd"/>. 
            Если меньше значения параметра <paramref name="StartIndex"/> - выбрасывается исключение. 
            Если превышает фактическую длину строки, а значение параметра <paramref name="UntilEnd"/> установлено в false - выбрасывается исключение.</param>
            <param name="IncludeStart">Булевый флаг, определяющий, включать (true) или не включать (false) начальный индекс.</param>
            <param name="IncludeEnd">Булевый флаг, определяющий, включать (true) или не включать (false) конечный индекс.</param>
            <param name="UntilEnd">Булевый флаг, определяющий, считывать ли строку до конца, 
            если конечный индекс <paramref name="EndIndex"/> превысил её длину (true), 
            или же выбросить исключение (false).</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.SubstringWithEnd(System.String,System.Int32,System.Int32)">
            <summary>
            Возвращает подстроку, которая начинается с указанного начального индекса (включительно) и кончается указанным конечным индексом (исключительно). 
            Если конечный индекс превышает фактическую длину строки - она считывается до конца.
            </summary>
            <param name="Input"></param>
            <param name="StartIndex">Включительный начальный индекс (позиция), отсчёт ведётся начиная с 0. Если меньше 0 - выбрасывается исключение.</param>
            <param name="EndIndex">Исключительный конечный индекс (позиция), отсчёт ведётся начиная с 0. 
            Если меньше значения параметра <paramref name="StartIndex"/> - выбрасывается исключение. 
            Если превышает фактическую длину строки, строка будет считана до конца.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.LeftSubstring(System.String,System.Int32)">
            <summary>
            Возвращает обрезанную справа часть входной строки, содержащую левую часть и указанное количество символов
            </summary>
            <param name="Source">Входная строка, обрезанную часть из которой следует возвратить. Если NULL или пустая, будет выброшено исключение.</param>
            <param name="Count">Количество символов, которое должно присутствовать в возвращаемой строке. 
            Если 0 - возвращается пустая строка. Если равно или больше фактической длины входной строки, она возвращается без обрезаний. Если меньше 0 - выбрасывается исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.RightSubstring(System.String,System.Int32)">
            <summary>
            Возвращает строку, содержащую указанное число знаков с правой стороны входной строки
            </summary>
            <param name="Source">Входная строка, обрезанную часть из которой следует возвратить. Если NULL или пустая, будет выброшено исключение.</param>
            <param name="Count">Количество символов, которое должно присутствовать в возвращаемой строке. 
            Если 0 - возвращается пустая строка. Если равно или больше фактической длины входной строки, она возвращается без обрезаний. Если меньше 0 - выбрасывается исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.CutLeft(System.String,System.Int32)">
            <summary>
            Обрезает указанное количество символов из левой части (из начала) указанной строки и возвращает новую строку без этих символов
            </summary>        
            <param name="Source">Входная строка, обрезанную часть которой следует возвратить. Если NULL или пустая, будет выброшено исключение.</param>
            <param name="Count">Количество символов, которое должно быть обрезано слева. Если 0, обрезание не производится и возвращается входная строка. 
            Если равно или больше фактической длины входной строки, возвращается пустая строка. Если меньше 0 - выбрасывается исключение.</param>
            <returns>Новая строка, содержащая часть входной</returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.CutRight(System.String,System.Int32)">
            <summary>
            Обрезает указанное количество символов из правой части (из конца) указанной строки и возвращает новую строку без этих символов
            </summary>        
            <param name="Source">Входная строка, обрезанную часть которой следует возвратить. Если NULL или пустая, будет выброшено исключение.</param>
            <param name="Count">Количество символов, которое должно быть обрезано справа. Если 0, обрезание не производится и возвращается входная строка. 
            Если равно или больше фактической длины входной строки, возвращается пустая строка. Если меньше 0 - выбрасывается исключение.</param>
            <returns>Новая строка, содержащая часть входной</returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.TrimStart(System.String,System.String,System.StringComparison,System.Boolean)">
            <summary>
            Возвращает обрезанную спереди (слева) копию входной строки без указанной подстроки, если входная строка начиналась с указанной подстроки
            </summary>
            <param name="Source">Входная строка, обрезанную спереди часть которой следует возвратить. Если NULL или пустая, будет выброшено исключение.</param>
            <param name="Target">Строка, равная подстроке, с которой начинается входная строка и которую следует обрезать. Если NULL или пустая, будет возвращена входная строка без изменений.</param>
            <param name="StrComp">Опции сравнения строк между собой</param>
            <param name="Recursive">Определяет, необходимо ли после первой обрезки проанализировать начало строки на совпадение ещё раз</param>
            <returns>Новый экземпляр строки</returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.TrimEnd(System.String,System.String,System.StringComparison,System.Boolean)">
            <summary>
            Возвращает обрезанную сзади (справа) копию входной строки без указанной подстроки, если входная строка оканчивалась указанной подстрокой
            </summary>
            <param name="Source">Входная строка, обрезанную сзади часть которой следует возвратить. Если NULL или пустая, будет выброшено исключение.</param>
            <param name="Target">Строка, равная подстроке, которой оканчивается входная строка и которую следует обрезать. Если NULL или пустая, будет возвращена входная строка без изменений.</param>
            <param name="StrComp">Опции сравнения строк между собой</param>
            <param name="Recursive">Определяет, необходимо ли после первой обрезки проанализировать начало строки на совпадение ещё раз</param>
            <returns>Новый экземпляр строки</returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.StartsWithOneOf(System.String,System.Collections.Generic.IList{System.String},System.StringComparison)">
            <summary>
            Определяет, начинается ли данная строка из любой из подстрок в указанном списке, возвращая индекс того элемента из списка, 
            с какого начинается строка, или же -1, если не начинается ни из одного.
            </summary>
            <param name="Source">Входная строка. Если NULL или пустая - будет выброшено исключение.</param>
            <param name="Prefixes">Список подстрок. Если NULL или пустой - будет выброшено исключение.</param>
            <param name="StrComp">Опции сравнения строк между собой</param>
            <returns>Индекс элемента из списка подстрок, с какого начинается входная строка, или -1, если не начинается ни с одного.</returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.EndsWithOneOf(System.String,System.Collections.Generic.IList{System.String},System.StringComparison)">
            <summary>
            Определяет, заканчивается ли данная строка на любую из подстрок в указанном списке, возвращая индекс того элемента из списка, 
            каким заканчивается строка, или же -1, если не заканчивается ни одним из.
            </summary>
            <param name="Source">Входная строка. Если NULL или пустая - будет выброшено исключение.</param>
            <param name="Postfixes">Список подстрок. Если NULL или пустой - будет выброшено исключение.</param>
            <param name="StrComp">Опции сравнения строк между собой</param>
            <returns>Индекс элемента из списка подстрок, каким заканчивается входная строка, или -1, если не заканчивается ни одним из.</returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.Replicate(System.String,System.Int32)">
            <summary>
            Повторяет значение строки указанное число раз
            </summary>
            <param name="Source">Строка, которую следует повторить указанное число раз. Если NULL или пустая - она будет возвращена без изменений.</param>
            <param name="Count">Число, указывающее количество повторений строки. Если меньше 1, будет выброшено исключение.</param>
            <returns>Новая строка</returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.Stuff(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Удаляет из исходной строки указанное количество символов, начиная с указанной позиции, и вставляет на их место указанную строку
            </summary>
            <param name="Source">Входная строка, в которой производится удаление и вставка. Если NULL - будет выброшено исключение. 
            Если пустая и указанная позиция равна 0 - фактически будет возвращена строка Replacement</param>
            <param name="StartIndex">Начальная позиция (индекс) во входной строке, с которой необходимо произвести удаление символов и на которую необходимо вставить указанную строку-заменитель. 
            Начинается с 0. Если значение больше длины входной строки или меньше 0, выбрасывается исключение.</param>
            <param name="Length">Количество символов, которые необходимо удалить. Если равно 0 - не будет удалён ни один символ, а указаная строка просто внедрится во входную по указанной позиции. 
            Если больше длины исходной строки с учётом смещения, указанного начальной позицией, то удалится вся часть входной строки вплоть до конца. Если меньше 0 - будет выброшено исключение.</param>
            <param name="Replacement">Строка-заменитель, которая должна внедриться во входную строку. Если NULL - будет выброшено исключение.</param>
            <returns>Новая строка, не являющаяся NULL</returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.IsStringNullOrEmpty(System.String)">
            <summary>
            Определяет, является ли строка NULL или пустой
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.IsStringNullEmptyWhiteSpace(System.String)">
            <summary>
            Определяет, является ли строка NULL, пустой или состоящей из одних пробелов. Оболочка к String.IsNullOrWhiteSpace из .NET 4.0.
            </summary>
            <param name="Source"></param>
            <returns>Если true - строка является NULL, пустая или содержит одни лишь пробелы</returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.IsStringNullEmptyWS(System.String)">
            <summary>
            Определяет, является ли строка NULL, пустой или состоящей из одних пробелов. Оболочка к String.IsNullOrWhiteSpace из .NET 4.0.
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.IsStringDigitsOnly(System.String)">
            <summary>
            Определяет, все ли символы в строке являются цифрами. Возвращает "true", если все до одного являются цифрами.
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.HasVisibleChars(System.String)">
            <summary>
            Определяет, содержится ли в строке хотя бы один символ, который можно увидеть, т.е. не пробел или управляющий символ. 
            Если строка является NULL, пустой, содержит только пробелы и/или управляющие символы, метод возвращает false.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.HasAlphaNumericChars(System.String)">
            <summary>
            Определяет, содержится ли в строке хотя бы один цифро-буквенный символ. Если содержится - возвращает true, если нет - false.
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.IsIn(System.String,System.StringComparison,System.String[])">
            <summary>
            Ищет данную строку в указанной последовательности строк, используя указанную опцию сравнения строк и возвращает результат поиска
            </summary>
            <param name="Source">Исходная строка, наличие которой требуется определить</param>
            <param name="StrComp">Опция определения равенства строк, которая применяется для поиска</param>
            <param name="Sequence">Последовательность, в которой происходит поиск. Если NULL или пустая, метод выбрасывает исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.IsIn(System.String,System.StringComparison,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ищет данную строку в указанной последовательности строк, используя указанную опцию сравнения строк и возвращает результат поиска
            </summary>
            <param name="source">Исходная строка, наличие которой требуется определить</param>        
            <param name="StrComp">Опция определения равенства строк, которая применяется для поиска</param>
            <param name="Sequence">Последовательность, в которой происходит поиск. Если NULL или пустая, метод возвращает false (отсутствует).</param>
            <returns>true - присутствует, false - отсутствует</returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.CleanString(System.String)">
            <summary>
            Возвращает указанную строку, из которой вычищены все управляющие символы типа переноса строки и т.д.
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Определяет, содержится ли во входной строке искомая подстрока с учётом указанных опций сравнения строк
            </summary>
            <param name="Source">Входная строка, в которой нужно произвести поиск. Если NULL или пустая - будет выброшено исключение.</param>
            <param name="ToCheck">Искомая подстрока, которую нужно найти во входной. Если NULL или пустая - будет выброшено исключение.</param>
            <param name="StrComp">Опции сравнения строк между собой</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Входная строка или искомая подстрока является NULL или пустой</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Значение параметра <paramref name="StrComp"/> некорректно</exception>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.Contains(System.String,System.String,System.Globalization.CompareOptions,System.Globalization.CultureInfo)">
            <summary>
            Определяет, содержится ли во входной строке искомая подстрока с учётом указанных глобализированных опций сравнения строк и культуры
            </summary>
            <param name="Source">Входная строка, в которой нужно произвести поиск. Если NULL или пустая - будет выброшено исключение.</param>
            <param name="ToCheck">Искомая подстрока, которую нужно найти во входной. Если NULL или пустая - будет выброшено исключение.</param>
            <param name="CompOpt">Глобализированные опции сравнения строк между собой</param>
            <param name="Culture">Культура, с учётом которой ведётся поиск. Если NULL - будет применена инвариантная культура.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Входная строка или искомая подстрока является NULL или пустой</exception>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.ReverseString(System.String)">
            <summary>
            Возвращает новую строку, символы в которой расположены в обратном порядке по сравнению с исходной строкой.
            </summary>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.MultiReplace(System.String,System.String,System.Char[])">
            <summary>
            Заменяет во входной строке все вхождения всех указанных (искомых) символов на целевую подстроку. Если ни одного искомого символа не найдено, возвращается копия исходной строки.
            </summary>
            <param name="Source">Входная строка. Если NULL или пустая, выбрасывается исключение.</param>
            <param name="Destination">Новая целевая подстрока, которой требуется заменить все указнные искомые символы. Если NULL, выбрасывается исключение.</param>
            <param name="Target">Массив искомых символов, все из которых требуется заменить. Дубликаты игнорируются. Если NULL или пустой - входная строка возвращается без изменений.</param>
            <returns>Новая строка, содержащая результат работы метода</returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.MultiReplace(System.String,System.Char,System.Char[])">
            <summary>
            Заменяет во входной строке все вхождения всех указанных (искомых) символов на целевой символ. Если ни одного искомого символа не найдено, возвращается копия исходной строки.
            </summary>
            <param name="Source">Входная строка. Если NULL или пустая, выбрасывается исключение.</param>
            <param name="Destination">Новый целевой символ, которым требуется заменить все указнные искомые символы. Если NULL, выбрасывается исключение.</param>
            <param name="Target">Массив искомых символов, все из которых требуется заменить. Дубликаты игнорируются. Если NULL или пустой - входная строка возвращается без изменений.</param>
            <returns>Новая строка, содержащая результат работы метода</returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.RemoveSpaces(System.String)">
            <summary>
            Удаляет все пробелы из указанной строки
            </summary>
            <param name="Source">Входная строка. Если NULL или пустая - возвращается без изменений.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.Split(System.String,System.Int32,System.Boolean,KlotosLib.StringExtensionMethods.PaddingOptions)">
            <summary>
            Разбивает данную строку на части с указанной длиной, начиная с начала или с конца, и применяя паддинг к той части, которая меньше указанной длины
            </summary>
            <param name="Source">Входная строка, которую следует разбить. Если NULL или пустая - будет выброшено исключение.</param>
            <param name="PartSize">Длина части выходной подстроки (в символах), на которые следует разбить входную строку. Если меньше 1, будет выброшено исключение. 
            Если больше или равно длине входной строки, в выходной массиве будет содержаться одна входная строка</param>
            <param name="SplitFromEnd">Определяет, откуда будет идти разбиение входной строки: с начала (false) или с конца (true).</param>
            <param name="PaddingOpt">Определяет, применять ли паддинг (выравнивание) при помощи пробела, и если да, то какой, по отношению к той выходной подстроке, длина которой меньше 
            длины части <paramref name="PartSize"/>.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"></exception>
            <returns>Массив выходных подстрок, длина которого не может быть меньше 1</returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.TryParseNumber``1(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Пытается распарсить входную строку и извлечь из неё число указанного типа, используя указанные стили числовой строки, и если это не удаётся, то возвращает NULL
            </summary>
            <typeparam name="TNumber">Тип числа, в которое необходимо конвертировать строку и которое следует вернуть. Поддерживается один из следующих типов: 
            Byte, SByte, Int16, UInt16, Int32, UInt32, Int64, UInt64, Single, Double, Decimal. Если указанный тип не является одним из данных, 
            выбрасывается исключение.</typeparam>
            <param name="Source">Входная строка, которая должна быть распарсена</param>
            <param name="Style">Правила парсинга числовой строки</param>
            <param name="CultureProvider">Формат языка и региональных параметров, с применением которого будет парситься строка. Если NULL, будет применён инвариантный формат.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Указанный тип данных не является подерживаемым числом</exception>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.StringExtensionMethods.TryParseNumber``1(System.String,System.Globalization.NumberStyles,System.Globalization.CultureInfo,``0)">
            <summary>
            Пытается распарсить исходную строку и извлечь из неё число указанного типа, используя указанные стили числовой строки, и если это не удаётся, 
            то возвращает указанное число <paramref name="FailValue"/>
            </summary>
            <typeparam name="TNumber">Тип числа, в которое необходимо конвертировать строку и которое следует вернуть. Поддерживается один из следующих типов: 
            Byte, SByte, Int16, UInt16, Int32, UInt32, Int64, UInt64, Single, Double, Decimal. Если указанный тип не является одним из данных, 
            выбрасывается исключение.</typeparam>
            <param name="Source">Входная строка, которая должна быть распарсена</param>
            <param name="Style">Правила парсинга числовой строки</param>
            <param name="Culture">Формат языка и региональных параметров, с применением которого будет парситься строка. Если NULL, будет применён инвариантный формат.</param>
            <param name="FailValue">Значение, которое будет возвращено методом, если парсинг будет неудачным</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Указанный тип данных не является подерживаемым числом</exception>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.StringExtensionMethods.PaddingOptions">
            <summary>
            Опции паддинга (выравнивания) частей строк
            </summary>
        </member>
        <member name="F:KlotosLib.StringExtensionMethods.PaddingOptions.DoNotPad">
            <summary>
            Не применять паддинг = 0
            </summary>
        </member>
        <member name="F:KlotosLib.StringExtensionMethods.PaddingOptions.PadLeft">
            <summary>
            Дополнить строку со старта (с начала) = 1
            </summary>
        </member>
        <member name="F:KlotosLib.StringExtensionMethods.PaddingOptions.PadRight">
            <summary>
            Дополнить строку с конца = 2
            </summary>
        </member>
        <member name="T:KlotosLib.CollectionTools">
            <summary>
            Содержит статические методы и методы расширения по работе с последовательностями
            </summary>
        </member>
        <member name="M:KlotosLib.CollectionTools.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Определяет, является ли последовательность NULL или пустой
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source">Любая последовательность, реализующая обобщённый интерфейс IEnumerable&#60;T&#62;</param>
            <returns>Если возвращает "true" — коллекция NULL или пустая. Если "false" — коллекция содержит минимум 1 элемент.</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.HasSingle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Определяет, содержит ли последовательность только один элемент. Если содержит - возвращает 'true', во всех остальных случаях возвращает 'false'. 
            Метод использует перечислитель и не нуждается в вычислении количества элементов последовательности.
            </summary>
            <typeparam name="TItem">Тип элементов последовательности - без ограничений</typeparam>
            <param name="Source">Любая последовательность, которая должна быть проверена</param>
            <returns>Если 'true' — последовательность содержит один и только один элемент. Если NULL, пустая или больше одного элемента - возвращается 'false'.</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.DeconcatFromString``1(System.String,System.Func{System.String,``0},System.String,System.String,System.String,System.Boolean)">
            <summary>
            Производит деконкатенацию входной строки, возвращая преобразованный строго типизированный список находящихся в ней элементов. 
            Принимает делегат на функцию, возвращающую один элемент из подстроки, разделитель элементов в строке, начало и конец строки.
            </summary>
            <typeparam name="TItem">Тип элемента входной строки - без ограничений</typeparam>
            <param name="Source">Входная строка, которая деконкатенируется. Если NULL, пустая или не содержит ни единого видимого символа, то в зависимости от значения параметра <paramref name="Strict"/> 
            будет возвращён пустой список или выброшено исключение.</param>
            <param name="ConversionFunc">Делегат на метод, который принимает строку и возвращает из неё экземпляр типа <typeparamref name="TItem"/>. Не может быть NULL. 
            Если в процессе парсинга данный метод выбрасывает исключение, то в зависимости от значения параметра <paramref name="Strict"/> элемент будет пропущен или будет выброшено исключение.</param>
            <param name="Prefix">Префикс входной строки, который отбрасывается. Не обязателен, может быть NULL; в таком случае парсинг идёт с самого первого символа.</param>
            <param name="Ending">Префикс входной строки, которое отбрасывается. Не обязательно, может быть NULL; в таком случае парсинг идёт до самого последнего символа.</param>
            <param name="Divider">Разделитель элементов. Обязателен, не может быть NULL или пустой строкой, ибо тогда метод не будет знать, где оканчивается один элемент и начинается второй.</param>
            <param name="Strict">Флаг "строгости" валидации входных данных. Если true - то при некорректности входной строки или выбрасывании исключения внутри метода конвертации 
            данный метод выбросит исключение. Если false - то возвратит пустой список в первом случае и пропустит элемент во втором.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.DeconcatFromString``2(System.String,System.Func{System.String,``0},System.Func{System.String,``1},System.String,System.String,System.Boolean)">
            <summary>
            Производит деконкатенацию входной строки, возвращая преобразованный строго типизированный словарь ключей и значений. 
            Принимает разделитель пар 'ключ-значение', разделитель между ключем и значением, а также два делегата на функции, возвращающие из подстрок ключи и значения.
            </summary>
            <typeparam name="TKey">Тип ключа словаря, должен реализовывать IEquatable&lt;TKey&gt;</typeparam>
            <typeparam name="TValue">Тип значения словаря</typeparam>
            <param name="Source">Входная строка. Если NULL или не содержит видимых символов, 
            то в зависимости от значения параметра <paramref name="Strict"/> будет выброшено исключение или возвращён NULL.</param>
            <param name="KeyConversionFunc">Делегат на функцию конвертации строки в тип ключа. Если NULL - будет выброшено исключение. Если во время конвертации функция выбросит исключение 
            или возвратит NULL, то в зависимости от значения параметра <paramref name="Strict"/> это исключение будет проброшено или же этот элемент будет пропущен (вместе со значением).</param>
            <param name="ValueConversionFunc">Делегат на функцию конвертации строки в тип значения. Если NULL - будет выброшено исключение. Если во время конвертации функция выбросит исключение, 
            то в зависимости от значения параметра <paramref name="Strict"/> это исключение будет проброшено или же этот элемент будет пропущен (вместе с ключем).</param>
            <param name="ItemDelimiter">Строковый разделитель между раздельными элементами (парами 'ключ-значение'). 
            Если NULL или пустая строка, или же если равен разделителю между ключем и значением — будет выброшено исключение.</param>
            <param name="KeyValueDelimiter">Строковый разделитель между одним ключем и значением. 
            Если NULL или пустая строка, или же если равен разделителю между элементами — будет выброшено исключение.</param>
            <param name="Strict">Определяет "строгость" выполнения: true - более строгий режим, при любых ошибках выбрасывать исключение; false - более щадящий режим, по возможности продолжать работу. 
            Если ключи дублируются, то в зависимости от параметра будет выброшено исключение или же элемент будет пропущен.</param>
            <exception cref="T:System.InvalidOperationException">Все ошибки при парсинге и работе с делегатом функции, не являющиеся предусловиями</exception>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.ConcatToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.String,System.String,System.Boolean)">
            <summary>
            Конкатенирует все элементы входной последовательности в одну строку в прямом порядке, от начала и до конца. 
            Использует делегат, конвертирующий элементы в строки, а если делегат не задан (является NULL), то производит конвертацию в строки посредством ToString(). 
            Также использует указанный префикс, окончание и разделитель. В зависимости от параметра Strict в некоторых ситуациях может или выбрасывать исключение, или возвращать пустую строку.
            </summary>
            <typeparam name="T">Тип элементов входной строго типизированной последовательности</typeparam>
            <param name="Source">Входная последовательность, элементы которой следует конкатенировать</param>
            <param name="ConversionFunc">Делегат на функцию, принимающую на вход аргумент типа 'T' и возвращающую 'System.String'</param>
            <param name="Prefix"></param>
            <param name="Ending"></param>
            <param name="Divider"></param>
            <param name="Strict">Определяет строгость валидации входной последовательности, префикса, окончания и разделителя. 
            Если true - при некорректных параметрах будет выброшено исключение, а если false - 
            будет возвращена пустая строка (в случае некорректной входной последовательности) или в качестве разделителей будут использоваться пустые строки.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.ConcatToString``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,System.String},System.Func{``1,System.String},System.String,System.String)">
            <summary>
            Конкатенирует все элементы входного словаря, содержащего набор пар "ключ-значение", в одну строку, в прямом порядке, от начала и до конца. 
            Использует отдельные указанные делегаты для ключа и значения, позволяющие, соответственно, преобразовать ключ и значение в строку. 
            Также принимает два разделителя - между ключем и значением, и между парами элементов.
            </summary>
            <typeparam name="TKey">Тип ключа словаря</typeparam>
            <typeparam name="TValue">Тип значения словаря</typeparam>
            <param name="Source">Исходный словарь, реализующий интерфейс IDictionary. Если NULL — будет возвращён NULL, а если пуст - будет возвращена пустая строка.</param>
            <param name="KeyToStrFunc">Делегат на метод, принимающий один параметр типа <typeparamref name="TKey"/> и возвращающий строку. Если не указан (является NULL), 
            ключ будет приведён к строке посредством вызова метода ToString().</param>
            <param name="ValueToStrFunc">Делегат на метод, принимающий один параметр типа <typeparamref name="TValue"/> и возвращающий строку. Если не указан (является NULL), 
            значение будет приведено к строке посредством вызова метода ToString().</param>
            <param name="KeyValueDivider">Разделитель между ключем и значением. Если является NULL, в качестве такого будет использован ' - '.</param>
            <param name="ItemsDivider">Разделитель между отдельными парами "ключ-значение". Если является NULL, в качестве такого будет использован '; '.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.ConcatToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Конкатенирует все элементы входной последовательности в одну строку в прямом порядке, от начала и до конца. 
            Использует указанный префикс, окончание, разделитель и конечный разделитель. 
            Также может пропускать невалидные элементы и удалять копии.
            </summary>
            <remarks>Метод генерирует исключение, если входная последовательность NULL или пустая, или если хотя бы один из строковых аргументов является NULL. 
            Если значение параметра PassInvalid = false и хотя бы один из элементов входной последовательности не может быть преобразован в строку, 
            генерируется исключение.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="Source"/>, <paramref name="Prefix"/>, <paramref name="Ending"/>, 
            <paramref name="Ending"/>, <paramref name="Divider"/>, <paramref name="LastDivider"/> являются null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Source"/></exception>
            <typeparam name="T">Тип элементов входной строго типизированной последовательности</typeparam>
            <param name="Source">Входная последовательность, элементы которой следует конкатенировать</param>
            <param name="Prefix">Префикс - строка, которая размещается в самом начале выходной строки, перед первым элементом. 
            Если префикс не нужен, укажите пустую строку. Если NULL - будет выброшено исключение.</param>
            <param name="Ending">Окончание - строка, которая размещается в самом конце выходной строки, после последнего элемента. 
            Если окончание не нужно, укажите пустую строку. Если NULL - будет выброшено исключение.</param>
            <param name="Divider">Разделитель - строка, которая будет помещена между всеми элементами, за исключением последней пары. 
            Если разделитель не нужен (элементы должны конкатенироваться вплотную), укажите пустую строку. Если NULL - будет выброшено исключение.</param>
            <param name="LastDivider">Последний разделитель - строка, которая будет помещена между последними двумя элементыми. 
            Если отдельный от разделителя последний разделитель не нужен, укажите его значение равным разделителю. 
            Если же последняя пара элементов должна быть сцеплена вплотную, используйте пустую строку. Если NULL - будет выброшено исключение.</param>
            <param name="DeleteDuplicates">Если true - будут удалены все дублирующиеся элементы на основании сравнения их строковых представлений.</param>
            <param name="PassInvalid">Если true - при конвертации в строки входных элементов метод не выбросит исключение, 
            если какой-либо элемент не может быть конвертирован в строку, а пропустит этот элемент и перейдёт ко следующему.</param>
            <returns>Образовавшаяся строка, которая не может быть NULL</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.ConcatToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Конкатенирует все элементы входной последовательности в одну строку в прямом порядке, от начала и до конца. 
            Использует указанный префикс, окончание и разделитель. 
            Также может пропускать невалидные элементы и удалять копии.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="Prefix"></param>
            <param name="Ending"></param>
            <param name="Divider">Разделитель - строка, которая будет помещена между всеми элементами. 
            Если разделитель не нужен (элементы должны конкатенироваться вплотную), укажите пустую строку. Если NULL - будет выброшено исключение.</param>
            <param name="DeleteDuplicates"></param>
            <param name="PassInvalid"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.ConcatToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Конкатенирует все элементы входной последовательности в одну строку в прямом порядке, от начала и до конца, 
            используя указанный разделитель, который будет помещен между элементами.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <param name="Divider">Разделитель. </param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.ConcatToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Конкатенирует все элементы входной последовательности в одну строку в прямом порядке, от начала и до конца, 
            используя запятую с пробелом (, ) в качестве разделителя, который будет помещен между элементами.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.SplitList``2(``0,System.Int32,KlotosLib.CollectionTools.SplitterDisposition,``0@,``0@)">
            <summary>
            Разделяет входной список на два подсписка по указанному индексу. Подсписки (первый и второй) возвращаются через выводные параметры. 
            Обобщённый метод, работающий с любыми коллекциями, которые реализуют интерфейс IList&lt;<typeparamref name="TItem"/>&gt; и имеющие конструктор без параметров.
            </summary>
            <typeparam name="TSeq">Тип входной строго типизированной коллекции, которая реализует интерфейс IList и имеет конструктор без параметров. 
            Должен быть указан явно, так как компилятор не может его вывести автоматически.</typeparam>
            <typeparam name="TItem">Тип элементов входной коллекции. Должен быть указан явно, так как компилятор не может его вывести автоматически.</typeparam>
            <param name="Source">Входной список, который требуется разделить по индексу. Если NULL или пустой, метод вернёт исключение. 
            При работе метода данный список никак не затрагивается, возвращаются новые экземпляры списков.</param>
            <param name="SplitterIndex">Индекс-разделитель входного списка, по которому требуется разделить входной список. 
            Если меньше 0 или больше фактической длины входного списка, метод вернёт исключение.</param>
            <param name="SplitterLocation">Указывает, включать ли элемент-разделитель входного словаря в конец первого или начало второго подсловаря, или вообще никуда не включать.</param>
            <param name="FirstPart">Выводной параметр - первый подсписок. 
            Если индекс-разделитель указывал на первый элемент входного списка (=0), который не включается в первый подсписок, то первый подсписок будет пустой.</param>
            <param name="LastPart">Выводной параметр - второй (последний) подсписок. 
            Если индекс-разделитель указывал на последнй элемент входного словаря и не включается в последний подсписок, то последний подсписок будет пустой.</param>
        </member>
        <member name="M:KlotosLib.CollectionTools.SplitDictionary``3(``0,``1,KlotosLib.CollectionTools.SplitterDisposition,``0@,``0@)">
            <summary>
            Разделяет входной словарь на два подсловаря по указанному ключу. Подсловари (первый и второй) возвращаются через выводные параметры. 
            Обобщённый метод, работающий с любыми коллекциями, которые реализуют интерфейс IDictionary&lt;<typeparamref name="TKey"/>, <typeparamref name="TValue"/>&gt; и имеющие конструктор без параметров.
            </summary>
            <typeparam name="TSeq">Тип входной строго типизированной коллекции, которая реализует интерфейс IDictionary и имеет конструктор без параметров. 
            Должен быть указан явно, так как компилятор не может его вывести автоматически.</typeparam>
            <typeparam name="TKey">Тип ключа входной коллекции и одновременно тип ключа-разделителя. Должен поддерживать сравнение с самим собой через реализацию интерфейса 
            IEquatable&#60;TKey&#62;. Должен быть указан явно, так как компилятор не может его вывести автоматически.</typeparam>
            <typeparam name="TValue">Тип значения обрабатываемого словаря, неограниченный параметр. Должен быть указан явно, так как компилятор не может его вывести автоматически.</typeparam>
            <param name="Source">Входной словарь, который требуется разделить по ключу-разделителю. Если NULL или пустой, метод вернёт исключение. 
            При работе метода данный словарь никак не затрагивается, возвращаются новые экземпляры словарей.</param>
            <param name="SplitterKey">Ключ-разделитель входного словаря, чей тип должен быть равен типу ключа входного словаря. Если отсутсвует во входном словаре, метод вернёт исключение.</param>
            <param name="SplitterLocation">Указывает, включать ли элемент-разделитель входного словаря в конец первого или начало второго подсловаря, или вообще никуда не включать.</param>
            <param name="FirstPart">Выводной параметр - первый подсловарь. Если ключ-разделитель был первым элементом входного словаря и не включается в первый подсловарь, то он будет пустой.</param>
            <param name="LastPart">Выводной параметр - второй (последний) подсловарь. Если ключ-разделитель был последним элементом входного словаря и не включается в последний подсловарь, то он будет пустой.</param>
        </member>
        <member name="M:KlotosLib.CollectionTools.ConvertToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Конвертирует последовательность пар "ключ-значение" в словарь, заполненный этими парами. 
            Данный метод помогает обрабатывать результаты LINQ-методов, которые после применения на словарях 
            возвращают непроиндексированную последовательность пар "ключ-значение", а не словарь.
            </summary>
            <typeparam name="TKey">Тип ключа - должен поддерживать сравнение сам с собой</typeparam>
            <typeparam name="TValue">Тип значения - неограниченный тип</typeparam>
            <param name="Source">Входная последовательность</param>
            <returns>Если во входной последовательности содержатся более одной пары с одинаковым ключем, в выходной словарь будет записана последняя такая пара</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.ReverseDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Возвращает элементы указанного словаря в обратном порядке, создавая новый словарь и не изменяя старый
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="Source">Входной словарь, элементы которого требуется обратить</param>
            <returns>Копия входного словаря, в которой все элементы находятся в обратном порядке</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.ToString``2(System.Collections.Generic.KeyValuePair{``0,``1},System.String,System.Boolean)">
            <summary>
            Возвращает строковое представление пары "ключ-значение" согласно указанным параметрам
            </summary>
            <typeparam name="TKey">Тип ключа - без ограничений</typeparam>
            <typeparam name="TValue">Тип значения - без ограничений</typeparam>
            <param name="KVP">Пара "ключ-значение"</param>
            <param name="Divider">Разделитель - помещается между ключем и значением, если не является NULL или пустой строкой</param>
            <param name="DirectOrder">Порядок конкатенации ключа и значения. 
            Если true - выводится сначала ключ, а потом значение; если false - сначала значение, а потом ключ</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.LowMemoryDuplicatedItemsDetector``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Внутренний метод, предназначенный для поиска дубликатов с указанным компаратором. Применяется, если входная последовательность имеет незначительный размер. 
            Неэффективен по времени и нагрузке на CPU, но эффективен в плане использования памяти.
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="Source"></param>
            <param name="ItemsComparer"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.HasDuplicatedItems``1(System.Collections.Generic.IList{``0})">
            <summary>
            Определяет, имеет ли входной список повторяющиеся (одинаковые) элементы
            </summary>
            <typeparam name="TItem">Тип элементов списка - должен поддерживать сравнение с самим собой, реализуя интерфейс IEquatable&#60;T&#62;</typeparam>
            <param name="Source">Входная последовательность, которая должна реализовывать доступ к её элементам по индексу</param>
            <returns>Если true - имеется минимум 2 одинаковых элемента в списке; если false - все элементы уникальны</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.HasDuplicatedItems``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Определяет, имеет ли входной список повторяющиеся (одинаковые) элементы, используя указанный компаратор
            </summary>
            <typeparam name="TItem">Тип элементов списка - без ограничений</typeparam>
            <param name="Source">Входная последовательность, которая должна реализовывать доступ к её элементам по индексу</param>
            <param name="ItemsComparer">Компаратор сравнения на равенство для типа <typeparamref name="TItem"/>. Если null - будет использован компаратор по умолчанию для этого типа.</param>
            <returns>Если true - имеется минимум 2 одинаковых элемента в списке; если false - все элементы уникальны</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.SwapValues``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0)">
            <summary>
            Меняет местами между собой значения указанных двух ключей в указанном словаре, заменяя значением первого указанного ключа значение второго и наоборот. 
            Записывает изменения в этот же экземпляр, после чего возвращает на него ссылку.
            </summary>
            <typeparam name="TKey">Тип ключа обрабатываемого словаря, который должен поддерживать сравнение со своим типом 
            через реализацию интерфейса IEquatable&#60;TKey&#62;</typeparam>
            <typeparam name="TValue">Тип значения - без ограничений</typeparam>
            <param name="Source">Исходный словарь. Если NULL, пустой или содержит один элемент - выбрасывается исключение.</param>
            <param name="First">Ключ первого элемента. Если равен ключу второго или не содержится во входном словаре - выбрасывается исключение.</param>
            <param name="Next">Ключ второго элемента. Если равен ключу первого или не содержится во входном словаре - выбрасывается исключение.</param>
        </member>
        <member name="M:KlotosLib.CollectionTools.SwapItems``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Меняет местами между собой элементы, расположенные по двум указанным индексам в указанном списке. 
            Записывает изменения в этот же экземпляр, после чего возвращает на него ссылку.
            </summary>
            <typeparam name="TItem">Тип элемента обрабатываемого списка - без ограничений</typeparam>
            <param name="Source">Исходной список. Если NULL, пустой или содержит один элемент - генерируется исключение.</param>
            <param name="FirstIndex">Индекс первого элемента. Если меньше 0, больше размера списка или равен второму индексу - генерируется исключение.</param>
            <param name="SecondIndex">Индекс второго элемента. Если меньше 0, больше размера списка или равен первому индексу - генерируется исключение.</param>
        </member>
        <member name="M:KlotosLib.CollectionTools.EqualsIgnoreOrder``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Сравнивает два словаря с идентичными типами ключей и значений на наличие идентичных пар с идентичными ключами и значениями. 
            При этом порядок вхождения элементов в словари игнорируется.
            </summary>
            <remarks>
            1. Если оба словаря NULL - true
            2. Если один NULL, а другой нет - false
            3. Если ссылки идентичны - true
            4. Если количество элементов неравное - false
            Далее идёт проход в цикле по элементам первого словаря. На каждой итерации выбирается одна пара ключа и значения. 
            1. Если ключ этой пары не найден в другом словаре - false
            2. Если ключ найден, но значение ключа не равно значению такового из первого - false
            По окончании итерирования возвращает true.
            </remarks>
            <typeparam name="TKey">Тип ключа словаря, который должен поддерживать сравнение со своим типом 
            через реализацию интерфейса IEquatable&#60;TKey&#62;</typeparam>
            <typeparam name="TValue">Тип значения словаря, который должен поддерживать сравнение со своим типом 
            через реализацию интерфейса IEquatable&#60;TKey&#62;</typeparam>
            <param name="Source">Входной словарь</param>
            <param name="Comparable">Другой словарь, который сравнивается с исходным</param>
            <returns>Если 'true' - словари равны, если 'false' - словари не равны</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.EqualsIgnoreOrder``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Проверяет два списка с идентичными типами элементов на равенство. 
            Игнорирует порядок вхождения элементов списков и повторяемость одинаковых элементов, 
            однако для выполнения условия равенства требует, чтобы в обоих списках общее количество элементов было одинаковым.
            </summary>
            <remarks>
            1. Если оба списка NULL - true
            2. Если один NULL, а другой нет - false
            3. Если оба пусты - true
            4. Если ссылки идентичны - true
            5. Если количество элементов неравное - false.
            Далее проходится по каждому элементу первого списка и ищёт его во втором. Если не находит - false. 
            Аналогично делается проход по второму с поиском элементов в первому.</remarks>
            <typeparam name="TItem">Тип элемента списков, который должен поддерживать сравнение со своим типом 
            через реализацию интерфейса IEquatable&#60;TKey&#62;</typeparam>
            <param name="Source">Входной список</param>
            <param name="Comparable">Другой список, который сравнивается с исходным</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.EqualsExact``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Выполняет точное сравнение двух словарей с идентичными типами ключей и значений, 
            проверяя как наличие и равенство соответствующих ключей и значений, так и их позиции. 
            </summary>
            <typeparam name="TKey">Тип ключа словаря, который должен поддерживать сравнение со своим типом 
            через реализацию интерфейса IEquatable&#60;TKey&#62;</typeparam>
            <typeparam name="TValue">Тип значения словаря, который должен поддерживать сравнение со своим типом 
            через реализацию интерфейса IEquatable&#60;TKey&#62;</typeparam>
            <param name="source">Исходный словарь</param>
            <param name="Comparable">Другой словарь, который сравнивается с исходным</param>
            <returns>Если 'true' - словари равны, если 'false' - словари не равны</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.EqualsExact``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Выполняет точное сравнение двух списков, анализируя проверяя наличие, равенство, количество и позицию каждого элемента одного списка во втором.
            </summary>
            <typeparam name="TItem">>Тип элемента списков, который должен поддерживать сравнение со своим типом 
            через реализацию интерфейса IEquatable&#60;TKey&#62;</typeparam>
            <param name="source">Исходный список</param>
            <param name="Comparable">Другой список, который сравнивается с исходным</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.ShallowEqualsEnumerables``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Выполняет мелкое сравнение двух generic-последовательностей любого типа коллекции с любым, но одинаковым для обоих коллекций типом элементов, 
            и возвращает результат равенства в виде трита: равно, не равно, равенство неизвестно. Условия равенства, неравенства и неизвестности: 
            1. Если обе последовательности NULL - true; 
            2. Если одна NULL, а другая нет - false; 
            3. Если обе пусты - true; 
            4. Если одна пуста, а другая нет - false; 
            5. Если ссылки идентичны - true; 
            6. Если количество элементов неравное - false. 
            Если ни одно из условий не исполнилось, возвращает NULL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.SortByValue``2(System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
            <summary>
            Сортирует входной словарь по значению элементов в указанном порядке, используя для значений компаратор по умолчанию и возвращает новый словарь с отсортированными элементами первого
            </summary>
            <typeparam name="TKey">Тип ключа словаря, который должен поддерживать проверку равенства со своим типом 
            через реализацию интерфейса IEquatable&#60;TKey&#62;</typeparam>
            <typeparam name="TValue">Тип значения словаря, который должен поддерживать сравнение со своим типом 
            через реализацию интерфейса IComparable&#60;TValue&#62;</typeparam>
            <param name="source"></param>
            <param name="Order">Порядок сравнения. Если 'true' - от меньших к большим, если 'false' - от больших к меньшим</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.GetIdenticalStart``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Выбирает одинаковую часть из начала обеих списков, если она в них присутствует. Если хотя бы один из списков NULL или пустой, выбрасывается исключение.
            </summary>
            <typeparam name="TItem">Тип элемента словарей, который должен поддерживать сравнение с самим собой 
            через реализацию интерфейса IEquatable&#60;TItem&#62;</typeparam>
            <param name="First"></param>
            <param name="Second"></param>
            <returns>Новый список</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.GetIdenticalEnd``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Выбирает одинаковую часть из конца списков, если она в них присутствует. Если хотя бы один из списков NULL или пустой, выбрасывается исключение. 
            Одинаковая часть возвращается в обратном порядке, то есть с конца к началу. Если списки не имеют одинаковой части в конце, возвращается пустой список.
            </summary>
            <typeparam name="TItem">Тип элемента словарей, который должен поддерживать сравнение с самим собой 
            через реализацию интерфейса IEquatable&#60;TItem&#62;</typeparam>
            <param name="First"></param>
            <param name="Second"></param>
            <returns>Новый список</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.GetPortionByKeys``2(System.Collections.Generic.IDictionary{``0,``1},System.Boolean,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Возвращает все элементы входного словаря, ключи которых находятся в указанном списке ключей
            </summary>
            <typeparam name="TKey">Тип ключа входного словаря и тип списка ключей - 
            должен поддерживать сравнение с самим собой путём реализации интерфейса IEquatable</typeparam>
            <typeparam name="TValue">Тип значения элемента входного словаря - неограниченный тип</typeparam>
            <param name="Source">Исходный словарь, из которого необходимо возвратить подсловарь, элементы которого содержат указанные ключи.</param>
            <param name="Keys">Список ключей, которые присутствуют во входном списке и значения с которыми из него требуется возвратить. 
            Дублирующиеся значения, если есть, будут проигнорированы.</param>
            <param name="PassNotFoundKeys">Определяет, выбрасывать ли исключение, если хотя бы один из указанных ключей отсутствует во входном словаре. 
            Если true - все указанные ключи, отсутствующие в словаре, будут опущены, и будут возвращены те элементы, которые имеют ключи; 
            если false - при первом несовпадающем ключе будет выброшено KeyNotFoundException</param>
            <returns>Новый словарь, который содержит все элементы входного словаря, чьи ключи совпали с теми, что были переданы методу. 
            Элементы в этом словаре расположены в том порядке, в котором переданы ключи. 
            Если ни один из переданных ключей не содержится в исходном словаре и параметр PassNotFoundKeys выставлен в true, метод возвратит пустой словарь.</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.GetPortionByKeys``2(System.Collections.Generic.IDictionary{``0,``1},System.Boolean,``0[])">
            <summary>
            Возвращает все элементы входного словаря, ключи которых находятся в указанном массиве ключей
            </summary>
            <remarks>Оболочка-перегрузка основного метода, принимающая ключи в виде массива params</remarks>
            <typeparam name="TKey">Тип ключа входного словаря и тип списка ключей - 
            должен поддерживать сравнение с самим собой путём реализации интерфейса IEquatable</typeparam>
            <typeparam name="TValue">Тип значения элемента входного словаря - неограниченный тип</typeparam>
            <param name="Source">Исходный словарь, из которого необходимо возвратить подсловарь. элементы которого содержат указанные ключи.</param>
            <param name="PassNotFoundKeys">Определяет, выбрасывать ли исключение, если хотя бы один из указанных ключей отсутствует во входном словаре. 
            Если true - все указанные ключи, отсутствующие в словаре, будут опущены, и будут возвращены те элементы, которые имеют ключи; 
            если false - при первом несовпадающем ключе будет выброшено KeyNotFoundException</param>
            <param name="Keys">Набор ключей, которые присутствуют во входном списке и значения с которыми из него требуется возвратить. 
            Дублирующиеся значения, если есть, будут проигнорированы.</param>
            <returns>Новый словарь, который содержит все элементы входного словаря, чьи ключи совпали с теми, что были переданы методу. 
            Элементы в этом словаре расположены в том порядке, в котором переданы ключи. 
            Если ни один из переданных ключей не содержится в исходном словаре и параметр PassNotFoundKeys выставлен в true, метод возвратит пустой словарь.</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.RemapDictionary``3(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.IEnumerable{``0},``2},System.Boolean)">
            <summary>
            Инвертирует входной словарь, преобразовывая значения в ключи и вызывая указанную функцию для множества ключей
            </summary>
            <typeparam name="TKey">Тип ключа входного словаря, должен поддерживать сравнение с самим собой</typeparam>
            <typeparam name="TValue">Тип значения входного словаря, должен поддерживать сравнение с самим собой</typeparam>
            <typeparam name="TNew">Тип, полученный в результате выполнения указанной через делегат функции, без ограничений</typeparam>
            <param name="Source">Входной словарь, не изменяется данным методом. Если NULL - будет выброшено исключение. Если пустой - будет возвращён пустой выходной словарь.</param>
            <param name="RemapFunc">Делегат на функцию, принимающую на вход набор элементов типа ключа входного словаря <typeparamref name="TKey"/> 
            и возвращающая один экземпляр типа <typeparamref name="TNew"/>. 
            Если во время вызова выбросит исключение, то в зависимости от значения параметра <paramref name="Strict"/> это исключение будет проброшено или подавлено.</param>
            <param name="Strict">Булевый флаг, указывающий, как обрабатывать NULL-значения входного словаря и исключения при вызове указанной через делегат функции. 
            Если true - при появлении NULL-значения или при возникновении исключения оно будет проброшено, 
            а если false - оно будет подавлено, а данный элемент выходного словаря будет пропущен.</param>
            <returns>Новый словарь, не являющийся NULL</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.ConcatArrays``1(``0[][])">
            <summary>
            Возвращает новосозданный одномерный массив-вектор, содержащий все элементы из всех указанных массивов
            </summary>
            <typeparam name="TItem">Тип элементов массивов, без ограничений</typeparam>
            <param name="Arrays">Массив массивов, все из которых следует конкатенировать в новый одномерный массив</param>
            <returns>Новый одномерный массив, размер (длина) которого точно соответствует количеству расположенных в нём элементов</returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.Shuffle``1(``0[],System.Random)">
            <summary>
            Выполняет перемешивание (тасование) элементов в данном массиве и записывает изменение в этот же экземпляр, возвращая ссылку на него. Использует указанный ГПСЧ.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Knuth_shuffle</remarks>
            <typeparam name="TItem">Тип элемента массива - без ограничений</typeparam>
            <param name="Source">Входной массив, в котором будет выполняться тасование. Если null или содержит меньше 2-х элементов - возвращается без изменений.</param>
            <param name="RandomInstance">Экземпляр ГПСЧ. Если null - будет выброшено исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.ShuffleNew``1(``0[],System.Random)">
            <summary>
            Возвращает новый массив, содержащий перемешанные (перетасованные) элементы данного массива. Использует указанный ГПСЧ.
            </summary>
            <remarks>http://en.wikipedia.org/wiki/Knuth_shuffle</remarks>
            <typeparam name="TItem">Тип элемента массива - без ограничений</typeparam>
            <param name="Source">Входной массив, перемешанную копию которого следует возвратить.  Если null - будет выброшено исключение.</param>
            <param name="RandomInstance">Экземпляр ГПСЧ. Если null - будет выброшено исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.CollectionTools.RandomItem``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Возвращает один случайно выбранный элемент последовательности. Использует указанный ГПСЧ.
            </summary>
            <remarks>Jon Skeet. C# in Depth</remarks>
            <typeparam name="TItem">Тип элемента последовательности - без ограничений</typeparam>
            <param name="Source">Входная последовательность. Если null или пустая - будет выброшено исключение. Если содержит один элемент - он будет возвращён.</param>
            <param name="RandomInstance">Экземпляр ГПСЧ. Если null - будет выброшено исключение.</param>
            <returns></returns>
        </member>
        <member name="T:KlotosLib.CollectionTools.SplitterDisposition">
            <summary>
            Определяет, включать ли элемент-разделитель в выходные коллекции (последовательности) и если да, то куда
            </summary>
        </member>
        <member name="F:KlotosLib.CollectionTools.SplitterDisposition.Reject">
            <summary>
            Не включать ни в какую выходную коллекцию
            </summary>
        </member>
        <member name="F:KlotosLib.CollectionTools.SplitterDisposition.ToFirst">
            <summary>
            Включить в конец первой коллекции
            </summary>
        </member>
        <member name="F:KlotosLib.CollectionTools.SplitterDisposition.ToLast">
            <summary>
            Включить в начало второй коллекции
            </summary>
        </member>
        <member name="T:KlotosLib.HttpTools">
            <summary>
            Содержит методы-расширения по работе с HTTP-запросами и ответами
            </summary>
        </member>
        <member name="M:KlotosLib.HttpTools.CollectFileData(System.Web.HttpRequest)">
            <summary>
            Возвращает список всех названий и размеров файлов, содержащихся в указанном запросе
            </summary>
            <param name="CurrentRequest"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.HttpTools.CollectFormData(System.Web.HttpRequest)">
            <summary>
            Возвращает все текстовые данные, извлечённые из формы запроса, в виде словаря ключей и значений
            </summary>
            <param name="CurrentRequest"></param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.HttpTools.GetAllHeaders(System.Net.WebResponse)">
            <summary>
            Возвращает все HTTP-хидеры из Web-ответа в виде словаря, где ключи - это названия хидеров, а значения - соотв. значения хидеров.
            </summary>
            <param name="SourceResponse">Экземпляр Web-ответа. Если NULL - будет выброшено исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.HttpTools.GetTextContent(System.Net.HttpWebResponse)">
            <summary>
            Возвращает содержимое тела HTTP-ответа как текст в изменяемой строке. После вызова метода поток, представляющий тело ответа, больше не будет доступен.
            </summary>
            <param name="SourceResponse">Экземпляр HTTP-ответа. Если NULL - будет выброшено исключение. Если же поток с телом ответа является NULL, то будет возвращён NULL.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.HttpTools.CollectSpecSessionData(System.Web.HttpContext,System.Boolean,System.String,System.String)">
            <summary>
            Возвращает всё содержимое сессионной коллекции из уровня сеанса или веб-сайта из указанного HTTP-контекста в виде строки с указанными разделителями
            </summary>
            <param name="CurrentContext">Контекст, из которого извлекаются сессионные данные</param>
            <param name="SessionOrApplication">Если true - извлечение будет происходить из сессионной коллекции уровня сеанса текущего пользователя, 
            а если false - из глобальной сессии веб-сайта</param>
            <param name="ExternalDelimiter">Разделитель между разными элементами коллекции. Если NULL - будет применена пустая строка.</param>
            <param name="InternalDelimiter">Разделитель между ключем и значением одного элемента. Если NULL - будет применена пустая строка.</param>
            <returns>Если указанный контекст равен NULL, будет возвращён NULL. Если в сессионной коллекции нет данных, будет возвращена пустая строка. 
            Иначе строка, содержащая все элементы коллекции с их индексами и ключами.</returns>
        </member>
        <member name="M:KlotosLib.HttpTools.CollectCookiesData(System.Web.HttpCookieCollection)">
            <summary>
            Возвращает все куки из указанного хранилища куки в виде словаря пар ключ-значение, где ключ - название куки-файла, а значение — значение куки-файла
            </summary>
            <param name="Cookies">Специализированная коллекция, содержащая куки-записи. Если NULL - будет выброшено исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.HttpTools.GetIPAddress(System.Web.HttpRequest)">
            <summary>
            Извлекает из указанного HTTP-запроса IP-адрес клиента и возвращает его
            </summary>
            <param name="CurrentRequest">Запрос, из которого необходимо извлечь IP-адрес. Если NULL - будет выброшено исключение.</param>
            <returns></returns>
        </member>
        <member name="M:KlotosLib.HttpTools.DecodeUri(System.String)">
            <summary>
            Декодирует URI, заменяя все escape-последовательности на небезопасные
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
    </members>
</doc>
